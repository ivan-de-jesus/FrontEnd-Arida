{"ast":null,"code":"// src/api/landsat.js\nexport async function searchLandsat({\n  lat,\n  lng,\n  /* opcionales */\n  date = new Date(),\n  // fecha “hasta”\n  daysBack = 30,\n  // cuántos días hacia atrás\n  cloudMax = 100,\n  // porcentaje máximo de nubes\n  limit = 1 // nº de escenas a devolver\n}) {\n  /* 1.  Construir rango de fechas --------------------------------------- */\n  const endISO = date.toISOString().split('T')[0];\n  const startISO = new Date(date.getTime() - daysBack * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n  /* 2.  Definir el área de búsqueda (bbox) ------------------------------ */\n  const bbox = [lng - 0.05, lat - 0.05, lng + 0.05, lat + 0.05]; // ±0.05° ≈ 11 km\n\n  /* 3.  Montar el cuerpo STAC ------------------------------------------- */\n  const body = {\n    collections: ['landsat-8-c2-l2'],\n    bbox,\n    datetime: `${startISO}/${endISO}`,\n    limit,\n    query: {\n      'eo:cloud_cover': {\n        lt: cloudMax\n      }\n    }\n  };\n\n  /* 4.  Llamar a la API -------------------------------------------------- */\n  const res = await fetch('https://planetarycomputer.microsoft.com/api/stac/v1/search', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) throw new Error(`STAC ${res.status}: ${await res.text()}`);\n  const data = await res.json();\n  if (!data.features.length) throw new Error(`No se encontró Landsat 8 en los últimos ${daysBack} días.`);\n\n  /* 5.  Firmar y devolver el primer ítem (o la lista completa) ---------- */\n  const sign = (href, token) => `${href}?${token}`;\n  const first = data.features[0];\n  const sas = first.assets['B4'].href.split('?')[1];\n  return {\n    /* si quieres más de una escena, devuelve data.features tal cual */\n    bbox: first.bbox,\n    assets: {\n      quicklook: sign(first.assets.preview.href, sas)\n    },\n    meta: {\n      sceneId: first.id,\n      acquired: first.properties.datetime,\n      cloudCover: first.properties['eo:cloud_cover']\n    }\n  };\n}","map":{"version":3,"names":["searchLandsat","lat","lng","date","Date","daysBack","cloudMax","limit","endISO","toISOString","split","startISO","getTime","bbox","body","collections","datetime","query","lt","res","fetch","method","headers","JSON","stringify","ok","Error","status","text","data","json","features","length","sign","href","token","first","sas","assets","quicklook","preview","meta","sceneId","id","acquired","properties","cloudCover"],"sources":["C:/Users/ivan.djgonzalez/Desktop/fotoMapa/photo-gps-viewer/src/api/landsat.js"],"sourcesContent":["// src/api/landsat.js\r\nexport async function searchLandsat ({\r\n    lat,\r\n    lng,\r\n    /* opcionales */\r\n    date       = new Date(), // fecha “hasta”\r\n    daysBack   = 30,         // cuántos días hacia atrás\r\n    cloudMax   = 100,        // porcentaje máximo de nubes\r\n    limit      = 1           // nº de escenas a devolver\r\n  }) {\r\n    /* 1.  Construir rango de fechas --------------------------------------- */\r\n    const endISO   = date.toISOString().split('T')[0]\r\n    const startISO = new Date(date.getTime() - daysBack * 24 * 60 * 60 * 1000)\r\n                       .toISOString().split('T')[0]\r\n  \r\n    /* 2.  Definir el área de búsqueda (bbox) ------------------------------ */\r\n    const bbox = [lng - 0.05, lat - 0.05, lng + 0.05, lat + 0.05] // ±0.05° ≈ 11 km\r\n  \r\n    /* 3.  Montar el cuerpo STAC ------------------------------------------- */\r\n    const body = {\r\n      collections: ['landsat-8-c2-l2'],\r\n      bbox,\r\n      datetime: `${startISO}/${endISO}`,\r\n      limit,\r\n      query: { 'eo:cloud_cover': { lt: cloudMax } }\r\n    }\r\n  \r\n    /* 4.  Llamar a la API -------------------------------------------------- */\r\n    const res = await fetch(\r\n      'https://planetarycomputer.microsoft.com/api/stac/v1/search',\r\n      { method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body) }\r\n    )\r\n    if (!res.ok)\r\n      throw new Error(`STAC ${res.status}: ${await res.text()}`)\r\n  \r\n    const data = await res.json()\r\n    if (!data.features.length)\r\n      throw new Error(`No se encontró Landsat 8 en los últimos ${daysBack} días.`)\r\n  \r\n    /* 5.  Firmar y devolver el primer ítem (o la lista completa) ---------- */\r\n    const sign = (href, token) => `${href}?${token}`\r\n    const first = data.features[0]\r\n    const sas   = first.assets['B4'].href.split('?')[1]\r\n  \r\n    return {\r\n      /* si quieres más de una escena, devuelve data.features tal cual */\r\n      bbox  : first.bbox,\r\n      assets: { quicklook: sign(first.assets.preview.href, sas) },\r\n      meta  : {\r\n        sceneId   : first.id,\r\n        acquired  : first.properties.datetime,\r\n        cloudCover: first.properties['eo:cloud_cover']\r\n      }\r\n    }\r\n  }\r\n  \r\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,aAAaA,CAAE;EACjCC,GAAG;EACHC,GAAG;EACH;EACAC,IAAI,GAAS,IAAIC,IAAI,CAAC,CAAC;EAAE;EACzBC,QAAQ,GAAK,EAAE;EAAU;EACzBC,QAAQ,GAAK,GAAG;EAAS;EACzBC,KAAK,GAAQ,CAAC,CAAW;AAC3B,CAAC,EAAE;EACD;EACA,MAAMC,MAAM,GAAKL,IAAI,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACjD,MAAMC,QAAQ,GAAG,IAAIP,IAAI,CAACD,IAAI,CAACS,OAAO,CAAC,CAAC,GAAGP,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CACtDI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAMG,IAAI,GAAG,CAACX,GAAG,GAAG,IAAI,EAAED,GAAG,GAAG,IAAI,EAAEC,GAAG,GAAG,IAAI,EAAED,GAAG,GAAG,IAAI,CAAC,EAAC;;EAE9D;EACA,MAAMa,IAAI,GAAG;IACXC,WAAW,EAAE,CAAC,iBAAiB,CAAC;IAChCF,IAAI;IACJG,QAAQ,EAAE,GAAGL,QAAQ,IAAIH,MAAM,EAAE;IACjCD,KAAK;IACLU,KAAK,EAAE;MAAE,gBAAgB,EAAE;QAAEC,EAAE,EAAEZ;MAAS;IAAE;EAC9C,CAAC;;EAED;EACA,MAAMa,GAAG,GAAG,MAAMC,KAAK,CACrB,4DAA4D,EAC5D;IAAEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CR,IAAI,EAAES,IAAI,CAACC,SAAS,CAACV,IAAI;EAAE,CAC/B,CAAC;EACD,IAAI,CAACK,GAAG,CAACM,EAAE,EACT,MAAM,IAAIC,KAAK,CAAC,QAAQP,GAAG,CAACQ,MAAM,KAAK,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC,EAAE,CAAC;EAE5D,MAAMC,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACD,IAAI,CAACE,QAAQ,CAACC,MAAM,EACvB,MAAM,IAAIN,KAAK,CAAC,2CAA2CrB,QAAQ,QAAQ,CAAC;;EAE9E;EACA,MAAM4B,IAAI,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK,GAAGD,IAAI,IAAIC,KAAK,EAAE;EAChD,MAAMC,KAAK,GAAGP,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC;EAC9B,MAAMM,GAAG,GAAKD,KAAK,CAACE,MAAM,CAAC,IAAI,CAAC,CAACJ,IAAI,CAACxB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEnD,OAAO;IACL;IACAG,IAAI,EAAIuB,KAAK,CAACvB,IAAI;IAClByB,MAAM,EAAE;MAAEC,SAAS,EAAEN,IAAI,CAACG,KAAK,CAACE,MAAM,CAACE,OAAO,CAACN,IAAI,EAAEG,GAAG;IAAE,CAAC;IAC3DI,IAAI,EAAI;MACNC,OAAO,EAAKN,KAAK,CAACO,EAAE;MACpBC,QAAQ,EAAIR,KAAK,CAACS,UAAU,CAAC7B,QAAQ;MACrC8B,UAAU,EAAEV,KAAK,CAACS,UAAU,CAAC,gBAAgB;IAC/C;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}