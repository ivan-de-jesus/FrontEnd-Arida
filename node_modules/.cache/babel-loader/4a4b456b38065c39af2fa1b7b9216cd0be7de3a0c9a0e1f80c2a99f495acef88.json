{"ast":null,"code":"// src/utils/ndwi-client.js\n\nimport { fromUrl } from 'geotiff';\n\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud\r\n * @param {number} lng     Longitud\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\n  // 1) Abre ambos COGs\n  const [tiffNIR, tiffSWIR] = await Promise.all([fromUrl(nirUrl), fromUrl(swirUrl)]);\n  const [imgNIR, imgSWIR] = await Promise.all([tiffNIR.getImage(), tiffSWIR.getImage()]);\n\n  // 2) Convierte lat/lng a columna/fila\n  const [originX, originY] = imgNIR.getOrigin(); // [x0, y0]\n  const [resX, resY] = imgNIR.getResolution(); // [pixelWidth, pixelHeight]\n  const width = imgNIR.getWidth();\n  const height = imgNIR.getHeight();\n  const col = Math.floor((lng - originX) / resX);\n  const row = Math.floor((originY - lat) / Math.abs(resY));\n  console.log('GeoTIFF info → origin:', originX, originY, 'resolution:', resX, resY, 'dims:', width, height);\n  console.log('Sampling pixel → col:', col, 'row:', row);\n\n  // 3) Verifica límites de la imagen\n  if (col < 0 || col >= width || row < 0 || row >= height) {\n    console.warn('Coordenada fuera de los límites de la imagen');\n    return null;\n  }\n\n  // 4) Lee un píxel de cada banda\n  const [nirVals] = await imgNIR.readRasters({\n    window: [col, row, col + 1, row + 1],\n    samples: [0]\n  });\n  const [swirVals] = await imgSWIR.readRasters({\n    window: [col, row, col + 1, row + 1],\n    samples: [0]\n  });\n  const nir = nirVals[0];\n  const swir = swirVals[0];\n  console.log('Raw pixel values → nir:', nir, 'swir:', swir);\n\n  // 5) Manejo de píxeles nodata\n  if (nir == null || swir == null || nir + swir === 0) {\n    console.warn('Valores inválidos o nodata para NDWI');\n    return null;\n  }\n\n  // 6) Calcula NDWI\n  const ndwi = (nir - swir) / (nir + swir);\n  console.log('Computed NDWI:', ndwi);\n  return ndwi;\n}","map":{"version":3,"names":["fromUrl","sampleNdwi","nirUrl","swirUrl","lat","lng","tiffNIR","tiffSWIR","Promise","all","imgNIR","imgSWIR","getImage","originX","originY","getOrigin","resX","resY","getResolution","width","getWidth","height","getHeight","col","Math","floor","row","abs","console","log","warn","nirVals","readRasters","window","samples","swirVals","nir","swir","ndwi"],"sources":["C:/Users/ivan.djgonzalez/Desktop/fotoMapa/photo-gps-viewer/src/utils/ndwi-client.js"],"sourcesContent":["// src/utils/ndwi-client.js\r\n\r\nimport { fromUrl } from 'geotiff'\r\n\r\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud\r\n * @param {number} lng     Longitud\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\r\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\r\n  // 1) Abre ambos COGs\r\n  const [tiffNIR, tiffSWIR] = await Promise.all([\r\n    fromUrl(nirUrl),\r\n    fromUrl(swirUrl)\r\n  ])\r\n  const [imgNIR, imgSWIR] = await Promise.all([\r\n    tiffNIR.getImage(),\r\n    tiffSWIR.getImage()\r\n  ])\r\n\r\n  // 2) Convierte lat/lng a columna/fila\r\n  const [originX, originY] = imgNIR.getOrigin()      // [x0, y0]\r\n  const [resX, resY]       = imgNIR.getResolution()  // [pixelWidth, pixelHeight]\r\n  const width  = imgNIR.getWidth()\r\n  const height = imgNIR.getHeight()\r\n  const col = Math.floor((lng - originX) / resX)\r\n  const row = Math.floor((originY - lat)  / Math.abs(resY))\r\n\r\n  console.log('GeoTIFF info → origin:', originX, originY,\r\n              'resolution:', resX, resY,\r\n              'dims:', width, height)\r\n  console.log('Sampling pixel → col:', col, 'row:', row)\r\n\r\n  // 3) Verifica límites de la imagen\r\n  if (col < 0 || col >= width || row < 0 || row >= height) {\r\n    console.warn('Coordenada fuera de los límites de la imagen')\r\n    return null\r\n  }\r\n\r\n  // 4) Lee un píxel de cada banda\r\n  const [nirVals] = await imgNIR.readRasters({\r\n    window: [col, row, col + 1, row + 1],\r\n    samples: [0]\r\n  })\r\n  const [swirVals] = await imgSWIR.readRasters({\r\n    window: [col, row, col + 1, row + 1],\r\n    samples: [0]\r\n  })\r\n\r\n  const nir  = nirVals[0]\r\n  const swir = swirVals[0]\r\n  console.log('Raw pixel values → nir:', nir, 'swir:', swir)\r\n\r\n  // 5) Manejo de píxeles nodata\r\n  if (nir == null || swir == null || (nir + swir) === 0) {\r\n    console.warn('Valores inválidos o nodata para NDWI')\r\n    return null\r\n  }\r\n\r\n  // 6) Calcula NDWI\r\n  const ndwi = (nir - swir) / (nir + swir)\r\n  console.log('Computed NDWI:', ndwi)\r\n  return ndwi\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}