{"ast":null,"code":"// src/utils/ndwi-client.js\n\nimport GeoTIFF from 'geotiff';\n\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud\r\n * @param {number} lng     Longitud\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\n  // 1) Abre ambos COGs\n  const [tiffNIR, tiffSWIR] = await Promise.all([GeoTIFF.fromUrl(nirUrl), GeoTIFF.fromUrl(swirUrl)]);\n  const [imgNIR, imgSWIR] = await Promise.all([tiffNIR.getImage(), tiffSWIR.getImage()]);\n\n  // 2) Convierte lat/lng a columna/fila\n  const [originX, originY] = imgNIR.getOrigin(); // [x0, y0]\n  const [resX, resY] = imgNIR.getResolution(); // [pixelWidth, pixelHeight]\n  const col = Math.floor((lng - originX) / resX);\n  const row = Math.floor((originY - lat) / Math.abs(resY));\n\n  // 3) Lee un píxel de cada banda\n  const [nirVals] = await imgNIR.readRasters({\n    window: [col, row, col + 1, row + 1],\n    samples: [0]\n  });\n  const [swirVals] = await imgSWIR.readRasters({\n    window: [col, row, col + 1, row + 1],\n    samples: [0]\n  });\n  const nir = nirVals[0];\n  const swir = swirVals[0];\n  if (nir + swir === 0) return null;\n\n  // 4) Calcula NDWI\n  return (nir - swir) / (nir + swir);\n}","map":{"version":3,"names":["GeoTIFF","sampleNdwi","nirUrl","swirUrl","lat","lng","tiffNIR","tiffSWIR","Promise","all","fromUrl","imgNIR","imgSWIR","getImage","originX","originY","getOrigin","resX","resY","getResolution","col","Math","floor","row","abs","nirVals","readRasters","window","samples","swirVals","nir","swir"],"sources":["C:/Users/ivan.djgonzalez/Desktop/fotoMapa/photo-gps-viewer/src/utils/ndwi-client.js"],"sourcesContent":["// src/utils/ndwi-client.js\r\n\r\nimport GeoTIFF from 'geotiff'\r\n\r\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud\r\n * @param {number} lng     Longitud\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\r\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\r\n  // 1) Abre ambos COGs\r\n  const [tiffNIR, tiffSWIR] = await Promise.all([\r\n    GeoTIFF.fromUrl(nirUrl),\r\n    GeoTIFF.fromUrl(swirUrl)\r\n  ])\r\n  const [imgNIR, imgSWIR] = await Promise.all([\r\n    tiffNIR.getImage(),\r\n    tiffSWIR.getImage()\r\n  ])\r\n\r\n  // 2) Convierte lat/lng a columna/fila\r\n  const [originX, originY] = imgNIR.getOrigin()      // [x0, y0]\r\n  const [resX, resY]       = imgNIR.getResolution()  // [pixelWidth, pixelHeight]\r\n  const col = Math.floor((lng - originX) / resX)\r\n  const row = Math.floor((originY - lat)  / Math.abs(resY))\r\n\r\n  // 3) Lee un píxel de cada banda\r\n  const [nirVals] = await imgNIR.readRasters({\r\n    window: [col, row, col + 1, row + 1],\r\n    samples: [0]\r\n  })\r\n  const [swirVals] = await imgSWIR.readRasters({\r\n    window: [col, row, col + 1, row + 1],\r\n    samples: [0]\r\n  })\r\n\r\n  const nir  = nirVals[0]\r\n  const swir = swirVals[0]\r\n  if (nir + swir === 0) return null\r\n\r\n  // 4) Calcula NDWI\r\n  return (nir - swir) / (nir + swir)\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAOA,OAAO,MAAM,SAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC1D;EACA,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5CT,OAAO,CAACU,OAAO,CAACR,MAAM,CAAC,EACvBF,OAAO,CAACU,OAAO,CAACP,OAAO,CAAC,CACzB,CAAC;EACF,MAAM,CAACQ,MAAM,EAAEC,OAAO,CAAC,GAAG,MAAMJ,OAAO,CAACC,GAAG,CAAC,CAC1CH,OAAO,CAACO,QAAQ,CAAC,CAAC,EAClBN,QAAQ,CAACM,QAAQ,CAAC,CAAC,CACpB,CAAC;;EAEF;EACA,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGJ,MAAM,CAACK,SAAS,CAAC,CAAC,EAAM;EACnD,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,GAASP,MAAM,CAACQ,aAAa,CAAC,CAAC,EAAE;EACnD,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACjB,GAAG,GAAGS,OAAO,IAAIG,IAAI,CAAC;EAC9C,MAAMM,GAAG,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACP,OAAO,GAAGX,GAAG,IAAKiB,IAAI,CAACG,GAAG,CAACN,IAAI,CAAC,CAAC;;EAEzD;EACA,MAAM,CAACO,OAAO,CAAC,GAAG,MAAMd,MAAM,CAACe,WAAW,CAAC;IACzCC,MAAM,EAAE,CAACP,GAAG,EAAEG,GAAG,EAAEH,GAAG,GAAG,CAAC,EAAEG,GAAG,GAAG,CAAC,CAAC;IACpCK,OAAO,EAAE,CAAC,CAAC;EACb,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,CAAC,GAAG,MAAMjB,OAAO,CAACc,WAAW,CAAC;IAC3CC,MAAM,EAAE,CAACP,GAAG,EAAEG,GAAG,EAAEH,GAAG,GAAG,CAAC,EAAEG,GAAG,GAAG,CAAC,CAAC;IACpCK,OAAO,EAAE,CAAC,CAAC;EACb,CAAC,CAAC;EAEF,MAAME,GAAG,GAAIL,OAAO,CAAC,CAAC,CAAC;EACvB,MAAMM,IAAI,GAAGF,QAAQ,CAAC,CAAC,CAAC;EACxB,IAAIC,GAAG,GAAGC,IAAI,KAAK,CAAC,EAAE,OAAO,IAAI;;EAEjC;EACA,OAAO,CAACD,GAAG,GAAGC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}