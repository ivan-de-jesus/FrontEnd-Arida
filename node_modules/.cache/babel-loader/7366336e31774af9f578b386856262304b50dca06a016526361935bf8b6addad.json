{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchLandsat } from '@/api/landsat';\nexport default {\n  name: 'MapView',\n  props: {\n    coords: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      map: null\n    };\n  },\n  async mounted() {\n    console.log('üöÄ MapView mounted, coords =', this.coords);\n\n    // 1Ô∏è‚É£ Intento cargar Google Maps\n    try {\n      console.log('‚ñ∂Ô∏è  Cargando Google Maps‚Ä¶');\n      const google = await new Loader({\n        apiKey: process.env.VUE_APP_GOOGLE_KEY,\n        version: 'weekly'\n      }).load();\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: this.coords,\n        zoom: 15,\n        disableDefaultUI: true\n      });\n      console.log('‚úÖ  Google Maps cargado');\n      new google.maps.Marker({\n        position: this.coords,\n        map: this.map\n      });\n    } catch (err) {\n      console.warn('‚ö†Ô∏è  Google Maps fallo:', err);\n    }\n\n    // 2Ô∏è‚É£ Calcular NDWI medio\n    console.log('‚ñ∂Ô∏è  A punto de calcular NDWI medio‚Ä¶');\n    try {\n      console.log('    ‚Üí Llamando a searchLandsat');\n      const ls8 = await searchLandsat({\n        lat: this.coords.latitude,\n        lng: this.coords.longitude\n      });\n      console.log('    ‚Üê searchLandsat devolvi√≥:', ls8);\n      const buffer = 0.001;\n      const geom = {/* como antes */};\n      const expr = '(nir08 - swir16) / (nir08 + swir16)';\n      const urlAgg = `https://planetarycomputer.microsoft.com/api/data/v1/collections/${encodeURIComponent(collection)}` + `/items/${encodeURIComponent(ls8.itemId)}` + `/aggregate` + `?assets=nir08,swir16` + `&expression=${encodeURIComponent(expr)}` + `&geom=${encodeURIComponent(JSON.stringify(geom))}` + (ls8.sas ? `&${ls8.sas}` : '');\n      console.log('    ‚Üí URL aggregate NDWI:', urlAgg);\n      const response = await fetch(urlAgg);\n      console.log('    ‚Üê aggregate HTTP status:', response.status);\n      const json = await response.json();\n      console.log('    ‚Üê aggregate JSON:', json);\n      const meanNdwi = json.result?.mean ?? json.mean ?? null;\n      console.log('    ‚Üí meanNdwi =', meanNdwi);\n      let status;\n      if (meanNdwi === null) status = 'Sin datos';else if (meanNdwi < 0.10) status = 'Seco';else if (meanNdwi < 0.25) status = 'Medio';else status = 'H√∫medo';\n      console.log('    ‚Üí status =', status);\n      this.$emit('ndwi-status', {\n        ndwi: meanNdwi,\n        status\n      });\n    } catch (error) {\n      console.error('‚ö†Ô∏è  Error calculando NDWI:', error);\n      this.$emit('ndwi-status', {\n        ndwi: null,\n        status: 'Sin datos'\n      });\n    }\n  }\n};","map":{"version":3,"names":["Loader","searchLandsat","name","props","coords","type","Object","required","data","map","mounted","console","log","google","apiKey","process","env","VUE_APP_GOOGLE_KEY","version","load","maps","Map","document","getElementById","center","zoom","disableDefaultUI","Marker","position","err","warn","ls8","lat","latitude","lng","longitude","buffer","geom","expr","urlAgg","encodeURIComponent","collection","itemId","JSON","stringify","sas","response","fetch","status","json","meanNdwi","result","mean","$emit","ndwi","error"],"sources":["src/components/MapView.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" class=\"w-100 rounded shadow\" style=\"height:350px; position: relative;\">\r\n    <!-- Mapa se inicializa aqu√≠ -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\nimport { searchLandsat } from '@/api/landsat'\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  props: {\r\n    coords: { type: Object, required: true }\r\n  },\r\n  data() {\r\n    return { map: null }\r\n  },\r\n async mounted() {\r\n  console.log('üöÄ MapView mounted, coords =', this.coords)\r\n\r\n  // 1Ô∏è‚É£ Intento cargar Google Maps\r\n  try {\r\n    console.log('‚ñ∂Ô∏è  Cargando Google Maps‚Ä¶')\r\n    const google = await new Loader({\r\n      apiKey : process.env.VUE_APP_GOOGLE_KEY,\r\n      version: 'weekly'\r\n    }).load()\r\n    this.map = new google.maps.Map(\r\n      document.getElementById('map'),\r\n      { center: this.coords, zoom: 15, disableDefaultUI: true }\r\n    )\r\n    console.log('‚úÖ  Google Maps cargado')\r\n    new google.maps.Marker({ position: this.coords, map: this.map })\r\n  } catch (err) {\r\n    console.warn('‚ö†Ô∏è  Google Maps fallo:', err)\r\n  }\r\n\r\n  // 2Ô∏è‚É£ Calcular NDWI medio\r\n  console.log('‚ñ∂Ô∏è  A punto de calcular NDWI medio‚Ä¶')\r\n  try {\r\n    console.log('    ‚Üí Llamando a searchLandsat')\r\n    const ls8 = await searchLandsat({ \r\n      lat: this.coords.latitude, \r\n      lng: this.coords.longitude \r\n    })\r\n    console.log('    ‚Üê searchLandsat devolvi√≥:', ls8)\r\n\r\n    const buffer = 0.001\r\n    const geom = { /* como antes */ }\r\n    const expr = '(nir08 - swir16) / (nir08 + swir16)'\r\n    const urlAgg = \r\n   `https://planetarycomputer.microsoft.com/api/data/v1/collections/${encodeURIComponent(collection)}` +\r\n   `/items/${encodeURIComponent(ls8.itemId)}` +\r\n  `/aggregate`\r\n        + `?assets=nir08,swir16`\r\n   + `&expression=${encodeURIComponent(expr)}`\r\n   + `&geom=${encodeURIComponent(JSON.stringify(geom))}`\r\n   + (ls8.sas ? `&${ls8.sas}` : '')\r\n    console.log('    ‚Üí URL aggregate NDWI:', urlAgg)\r\n\r\n    const response = await fetch(urlAgg)\r\n    console.log('    ‚Üê aggregate HTTP status:', response.status)\r\n    const json = await response.json()\r\n    console.log('    ‚Üê aggregate JSON:', json)\r\n\r\n    const meanNdwi = json.result?.mean ?? json.mean ?? null\r\n    console.log('    ‚Üí meanNdwi =', meanNdwi)\r\n\r\n    let status\r\n    if (meanNdwi === null) status = 'Sin datos'\r\n    else if (meanNdwi < 0.10) status = 'Seco'\r\n    else if (meanNdwi < 0.25) status = 'Medio'\r\n    else status = 'H√∫medo'\r\n    console.log('    ‚Üí status =', status)\r\n\r\n    this.$emit('ndwi-status', { ndwi: meanNdwi, status })\r\n  } catch (error) {\r\n    console.error('‚ö†Ô∏è  Error calculando NDWI:', error)\r\n    this.$emit('ndwi-status', { ndwi: null, status: 'Sin datos' })\r\n  }\r\n}\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  position: relative;\r\n}\r\n</style>\r\n"],"mappings":";;AAOA,SAAAA,MAAA;AACA,SAAAC,aAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,MAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;EACA;EACAC,KAAA;IACA;MAAAC,GAAA;IAAA;EACA;EACA,MAAAC,QAAA;IACAC,OAAA,CAAAC,GAAA,sCAAAR,MAAA;;IAEA;IACA;MACAO,OAAA,CAAAC,GAAA;MACA,MAAAC,MAAA,aAAAb,MAAA;QACAc,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,kBAAA;QACAC,OAAA;MACA,GAAAC,IAAA;MACA,KAAAV,GAAA,OAAAI,MAAA,CAAAO,IAAA,CAAAC,GAAA,CACAC,QAAA,CAAAC,cAAA,SACA;QAAAC,MAAA,OAAApB,MAAA;QAAAqB,IAAA;QAAAC,gBAAA;MAAA,CACA;MACAf,OAAA,CAAAC,GAAA;MACA,IAAAC,MAAA,CAAAO,IAAA,CAAAO,MAAA;QAAAC,QAAA,OAAAxB,MAAA;QAAAK,GAAA,OAAAA;MAAA;IACA,SAAAoB,GAAA;MACAlB,OAAA,CAAAmB,IAAA,2BAAAD,GAAA;IACA;;IAEA;IACAlB,OAAA,CAAAC,GAAA;IACA;MACAD,OAAA,CAAAC,GAAA;MACA,MAAAmB,GAAA,SAAA9B,aAAA;QACA+B,GAAA,OAAA5B,MAAA,CAAA6B,QAAA;QACAC,GAAA,OAAA9B,MAAA,CAAA+B;MACA;MACAxB,OAAA,CAAAC,GAAA,kCAAAmB,GAAA;MAEA,MAAAK,MAAA;MACA,MAAAC,IAAA;MACA,MAAAC,IAAA;MACA,MAAAC,MAAA,GACA,mEAAAC,kBAAA,CAAAC,UAAA,MACA,UAAAD,kBAAA,CAAAT,GAAA,CAAAW,MAAA,MACA,eACA,yBACA,eAAAF,kBAAA,CAAAF,IAAA,MACA,SAAAE,kBAAA,CAAAG,IAAA,CAAAC,SAAA,CAAAP,IAAA,QACAN,GAAA,CAAAc,GAAA,OAAAd,GAAA,CAAAc,GAAA;MACAlC,OAAA,CAAAC,GAAA,8BAAA2B,MAAA;MAEA,MAAAO,QAAA,SAAAC,KAAA,CAAAR,MAAA;MACA5B,OAAA,CAAAC,GAAA,iCAAAkC,QAAA,CAAAE,MAAA;MACA,MAAAC,IAAA,SAAAH,QAAA,CAAAG,IAAA;MACAtC,OAAA,CAAAC,GAAA,0BAAAqC,IAAA;MAEA,MAAAC,QAAA,GAAAD,IAAA,CAAAE,MAAA,EAAAC,IAAA,IAAAH,IAAA,CAAAG,IAAA;MACAzC,OAAA,CAAAC,GAAA,qBAAAsC,QAAA;MAEA,IAAAF,MAAA;MACA,IAAAE,QAAA,WAAAF,MAAA,oBACA,IAAAE,QAAA,SAAAF,MAAA,eACA,IAAAE,QAAA,SAAAF,MAAA,gBACAA,MAAA;MACArC,OAAA,CAAAC,GAAA,mBAAAoC,MAAA;MAEA,KAAAK,KAAA;QAAAC,IAAA,EAAAJ,QAAA;QAAAF;MAAA;IACA,SAAAO,KAAA;MACA5C,OAAA,CAAA4C,KAAA,+BAAAA,KAAA;MACA,KAAAF,KAAA;QAAAC,IAAA;QAAAN,MAAA;MAAA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}