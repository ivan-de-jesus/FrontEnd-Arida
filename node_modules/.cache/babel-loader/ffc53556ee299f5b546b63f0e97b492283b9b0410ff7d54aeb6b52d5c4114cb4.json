{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchLandsat } from '@/api/landsat';\nimport { buildNdwiUrl } from '@/utils/ndwi';\nexport default {\n  name: 'MapView',\n  props: {\n    coords: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      map: null\n    };\n  },\n  async mounted() {\n    const google = await new Loader({\n      apiKey: process.env.VUE_APP_GOOGLE_KEY,\n      version: 'weekly'\n    }).load();\n    const {\n      latitude: lat,\n      longitude: lng\n    } = this.coords;\n    this.map = new google.maps.Map(document.getElementById('map'), {\n      center: {\n        lat,\n        lng\n      },\n      zoom: 15,\n      disableDefaultUI: true\n    });\n    new google.maps.Marker({\n      position: {\n        lat,\n        lng\n      },\n      map: this.map\n    });\n    try {\n      const ls8 = await searchLandsat({\n        lat,\n        lng\n      });\n\n      // 1) Capa NDWI semáforo\n      const tpl = buildNdwiUrl({\n        itemId: ls8.itemId,\n        sas: ls8.sas\n      });\n      const ndwiLayer = new google.maps.ImageMapType({\n        getTileUrl: (c, z) => tpl.replace('{z}', z).replace('{x}', c.x).replace('{y}', c.y),\n        tileSize: new google.maps.Size(256, 256),\n        opacity: 0.7,\n        name: 'NDWI'\n      });\n      this.map.overlayMapTypes.push(ndwiLayer);\n\n      // 2) Calcular NDWI medio en un área pequeña\n      const buffer = 0.001; // ~100m\n      const geom = {\n        type: 'Polygon',\n        coordinates: [[[lng - buffer, lat - buffer], [lng - buffer, lat + buffer], [lng + buffer, lat + buffer], [lng + buffer, lat - buffer], [lng - buffer, lat - buffer]]]\n      };\n      const expr = '(nir08 - swir16) / (nir08 + swir16)';\n      const urlAgg = 'https://planetarycomputer.microsoft.com/api/data/v1/item/aggregate' + `?collection=landsat-c2-l2&item=${ls8.itemId}` + '&assets=nir08,swir16' + `&expression=${encodeURIComponent(expr)}` + `&geom=${encodeURIComponent(JSON.stringify(geom))}` + (ls8.sas ? `&${ls8.sas}` : '');\n      const aggJson = await fetch(urlAgg).then(r => r.json());\n      const meanNdwi = aggJson.result.mean;\n      const status = meanNdwi < 0.10 ? 'Seco' : meanNdwi < 0.25 ? 'Medio' : 'Húmedo';\n\n      // Emitimos al padre para mostrar abajo del mapa\n      this.$emit('ndwi-status', {\n        ndwi: meanNdwi,\n        status\n      });\n    } catch (err) {\n      console.error(err);\n      this.$emit('ndwi-status', {\n        ndwi: null,\n        status: 'Error'\n      });\n    }\n  }\n};","map":{"version":3,"names":["Loader","searchLandsat","buildNdwiUrl","name","props","coords","type","Object","required","data","map","mounted","google","apiKey","process","env","VUE_APP_GOOGLE_KEY","version","load","latitude","lat","longitude","lng","maps","Map","document","getElementById","center","zoom","disableDefaultUI","Marker","position","ls8","tpl","itemId","sas","ndwiLayer","ImageMapType","getTileUrl","c","z","replace","x","y","tileSize","Size","opacity","overlayMapTypes","push","buffer","geom","coordinates","expr","urlAgg","encodeURIComponent","JSON","stringify","aggJson","fetch","then","r","json","meanNdwi","result","mean","status","$emit","ndwi","err","console","error"],"sources":["src/components/MapView.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" class=\"w-100 rounded shadow\" style=\"height:350px;\">\r\n    <!-- El semáforo ahora lo emite hacia el padre, no se renderiza dentro -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\nimport { searchLandsat } from '@/api/landsat'\r\nimport { buildNdwiUrl }  from '@/utils/ndwi'\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  props: {\r\n    coords: { type: Object, required: true }\r\n  },\r\n  data() {\r\n    return {\r\n      map: null\r\n    }\r\n  },\r\n  async mounted() {\r\n    const google = await new Loader({\r\n      apiKey: process.env.VUE_APP_GOOGLE_KEY,\r\n      version: 'weekly'\r\n    }).load()\r\n\r\n    const { latitude: lat, longitude: lng } = this.coords\r\n    this.map = new google.maps.Map(document.getElementById('map'), {\r\n      center: { lat, lng },\r\n      zoom: 15,\r\n      disableDefaultUI: true\r\n    })\r\n    new google.maps.Marker({ position: { lat, lng }, map: this.map })\r\n\r\n    try {\r\n      const ls8 = await searchLandsat({ lat, lng })\r\n\r\n      // 1) Capa NDWI semáforo\r\n      const tpl = buildNdwiUrl({ itemId: ls8.itemId, sas: ls8.sas })\r\n      const ndwiLayer = new google.maps.ImageMapType({\r\n        getTileUrl: (c, z) => tpl.replace('{z}', z).replace('{x}', c.x).replace('{y}', c.y),\r\n        tileSize: new google.maps.Size(256, 256),\r\n        opacity: 0.7,\r\n        name: 'NDWI'\r\n      })\r\n      this.map.overlayMapTypes.push(ndwiLayer)\r\n\r\n      // 2) Calcular NDWI medio en un área pequeña\r\n      const buffer = 0.001 // ~100m\r\n      const geom = {\r\n        type: 'Polygon',\r\n        coordinates: [[\r\n          [lng - buffer, lat - buffer],\r\n          [lng - buffer, lat + buffer],\r\n          [lng + buffer, lat + buffer],\r\n          [lng + buffer, lat - buffer],\r\n          [lng - buffer, lat - buffer]\r\n        ]]\r\n      }\r\n      const expr = '(nir08 - swir16) / (nir08 + swir16)'\r\n      const urlAgg =\r\n        'https://planetarycomputer.microsoft.com/api/data/v1/item/aggregate'\r\n        + `?collection=landsat-c2-l2&item=${ls8.itemId}`\r\n        + '&assets=nir08,swir16'\r\n        + `&expression=${encodeURIComponent(expr)}`\r\n        + `&geom=${encodeURIComponent(JSON.stringify(geom))}`\r\n        + (ls8.sas ? `&${ls8.sas}` : '')\r\n\r\n      const aggJson = await fetch(urlAgg).then(r => r.json())\r\n      const meanNdwi = aggJson.result.mean\r\n      const status = meanNdwi < 0.10 ? 'Seco'\r\n                    : meanNdwi < 0.25 ? 'Medio'\r\n                    : 'Húmedo'\r\n\r\n      // Emitimos al padre para mostrar abajo del mapa\r\n      this.$emit('ndwi-status', { ndwi: meanNdwi, status })\r\n    }\r\n    catch (err) {\r\n      console.error(err)\r\n      this.$emit('ndwi-status', { ndwi: null, status: 'Error' })\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":";;;AAOA,SAAAA,MAAA;AACA,SAAAC,aAAA;AACA,SAAAC,YAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,MAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;EACA;EACAC,KAAA;IACA;MACAC,GAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,MAAAC,MAAA,aAAAZ,MAAA;MACAa,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,kBAAA;MACAC,OAAA;IACA,GAAAC,IAAA;IAEA;MAAAC,QAAA,EAAAC,GAAA;MAAAC,SAAA,EAAAC;IAAA,SAAAjB,MAAA;IACA,KAAAK,GAAA,OAAAE,MAAA,CAAAW,IAAA,CAAAC,GAAA,CAAAC,QAAA,CAAAC,cAAA;MACAC,MAAA;QAAAP,GAAA;QAAAE;MAAA;MACAM,IAAA;MACAC,gBAAA;IACA;IACA,IAAAjB,MAAA,CAAAW,IAAA,CAAAO,MAAA;MAAAC,QAAA;QAAAX,GAAA;QAAAE;MAAA;MAAAZ,GAAA,OAAAA;IAAA;IAEA;MACA,MAAAsB,GAAA,SAAA/B,aAAA;QAAAmB,GAAA;QAAAE;MAAA;;MAEA;MACA,MAAAW,GAAA,GAAA/B,YAAA;QAAAgC,MAAA,EAAAF,GAAA,CAAAE,MAAA;QAAAC,GAAA,EAAAH,GAAA,CAAAG;MAAA;MACA,MAAAC,SAAA,OAAAxB,MAAA,CAAAW,IAAA,CAAAc,YAAA;QACAC,UAAA,EAAAA,CAAAC,CAAA,EAAAC,CAAA,KAAAP,GAAA,CAAAQ,OAAA,QAAAD,CAAA,EAAAC,OAAA,QAAAF,CAAA,CAAAG,CAAA,EAAAD,OAAA,QAAAF,CAAA,CAAAI,CAAA;QACAC,QAAA,MAAAhC,MAAA,CAAAW,IAAA,CAAAsB,IAAA;QACAC,OAAA;QACA3C,IAAA;MACA;MACA,KAAAO,GAAA,CAAAqC,eAAA,CAAAC,IAAA,CAAAZ,SAAA;;MAEA;MACA,MAAAa,MAAA;MACA,MAAAC,IAAA;QACA5C,IAAA;QACA6C,WAAA,IACA,CAAA7B,GAAA,GAAA2B,MAAA,EAAA7B,GAAA,GAAA6B,MAAA,GACA,CAAA3B,GAAA,GAAA2B,MAAA,EAAA7B,GAAA,GAAA6B,MAAA,GACA,CAAA3B,GAAA,GAAA2B,MAAA,EAAA7B,GAAA,GAAA6B,MAAA,GACA,CAAA3B,GAAA,GAAA2B,MAAA,EAAA7B,GAAA,GAAA6B,MAAA,GACA,CAAA3B,GAAA,GAAA2B,MAAA,EAAA7B,GAAA,GAAA6B,MAAA,EACA;MACA;MACA,MAAAG,IAAA;MACA,MAAAC,MAAA,GACA,uEACA,kCAAArB,GAAA,CAAAE,MAAA,KACA,yBACA,eAAAoB,kBAAA,CAAAF,IAAA,MACA,SAAAE,kBAAA,CAAAC,IAAA,CAAAC,SAAA,CAAAN,IAAA,QACAlB,GAAA,CAAAG,GAAA,OAAAH,GAAA,CAAAG,GAAA;MAEA,MAAAsB,OAAA,SAAAC,KAAA,CAAAL,MAAA,EAAAM,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,IAAA;MACA,MAAAC,QAAA,GAAAL,OAAA,CAAAM,MAAA,CAAAC,IAAA;MACA,MAAAC,MAAA,GAAAH,QAAA,mBACAA,QAAA,oBACA;;MAEA;MACA,KAAAI,KAAA;QAAAC,IAAA,EAAAL,QAAA;QAAAG;MAAA;IACA,EACA,OAAAG,GAAA;MACAC,OAAA,CAAAC,KAAA,CAAAF,GAAA;MACA,KAAAF,KAAA;QAAAC,IAAA;QAAAF,MAAA;MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}