{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchLandsat } from '@/api/landsat';\nimport { buildNdwiUrl } from '@/utils/ndwi';\nexport default {\n  name: 'MapView',\n  props: {\n    coords: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      map: null,\n      ndwi: null,\n      status: null\n    };\n  },\n  async mounted() {\n    console.log('MapView mounted, coords=', this.coords);\n\n    // 1) Inicializa Google Maps\n    const google = await new Loader({\n      apiKey: process.env.VUE_APP_GOOGLE_KEY,\n      version: 'weekly'\n    }).load();\n    const {\n      latitude: lat,\n      longitude: lng\n    } = this.coords;\n    this.map = new google.maps.Map(document.getElementById('map'), {\n      center: {\n        lat,\n        lng\n      },\n      zoom: 15,\n      disableDefaultUI: true\n    });\n    new google.maps.Marker({\n      position: {\n        lat,\n        lng\n      },\n      map: this.map\n    });\n\n    // 2) Busca Landsat y pinta semáforo NDWI\n    try {\n      const ls8 = await searchLandsat({\n        lat,\n        lng\n      });\n      console.log('Landsat result', ls8);\n\n      // 2a) Overlay NDWI semáforo\n      const tpl = buildNdwiUrl({\n        itemId: ls8.itemId,\n        sas: ls8.sas\n      });\n      const ndwiLayer = new google.maps.ImageMapType({\n        getTileUrl: (c, z) => tpl.replace('{z}', z).replace('{x}', c.x).replace('{y}', c.y),\n        tileSize: new google.maps.Size(256, 256),\n        opacity: 0.7,\n        name: 'NDWI'\n      });\n      this.map.overlayMapTypes.push(ndwiLayer);\n\n      // 3) Calcula NDWI medio en 100 m alrededor del pin\n      const buffer = 0.001;\n      const geom = {\n        type: 'Polygon',\n        coordinates: [[[lng - buffer, lat - buffer], [lng - buffer, lat + buffer], [lng + buffer, lat + buffer], [lng + buffer, lat - buffer], [lng - buffer, lat - buffer]]]\n      };\n      const expr = '(nir08 - swir16) / (nir08 + swir16)';\n      const urlAgg = 'https://planetarycomputer.microsoft.com/api/data/v1/item/aggregate' + `?collection=landsat-c2-l2&item=${ls8.itemId}` + '&assets=nir08,swir16' + `&expression=${encodeURIComponent(expr)}` + `&geom=${encodeURIComponent(JSON.stringify(geom))}` + (ls8.sas ? `&${ls8.sas}` : '');\n      console.log('Fetching aggregate URL:', urlAgg);\n      const aggRes = await fetch(urlAgg);\n      const aggJson = await aggRes.json();\n      console.log('Aggregate response:', aggJson);\n      this.ndwi = aggJson.result.mean;\n      this.status = this.ndwi < 0.10 ? 'Seco' : this.ndwi < 0.25 ? 'Medio' : 'Húmedo';\n      console.log(`NDWI medio=${this.ndwi}, status=${this.status}`);\n    } catch (err) {\n      console.error('Error en MapView:', err);\n      // para que al menos se muestre algo\n      this.status = 'Error';\n      this.ndwi = null;\n    }\n  }\n};","map":{"version":3,"names":["Loader","searchLandsat","buildNdwiUrl","name","props","coords","type","Object","required","data","map","ndwi","status","mounted","console","log","google","apiKey","process","env","VUE_APP_GOOGLE_KEY","version","load","latitude","lat","longitude","lng","maps","Map","document","getElementById","center","zoom","disableDefaultUI","Marker","position","ls8","tpl","itemId","sas","ndwiLayer","ImageMapType","getTileUrl","c","z","replace","x","y","tileSize","Size","opacity","overlayMapTypes","push","buffer","geom","coordinates","expr","urlAgg","encodeURIComponent","JSON","stringify","aggRes","fetch","aggJson","json","result","mean","err","error"],"sources":["src/components/MapView.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" class=\"w-100 rounded shadow\" style=\"height:350px; position:relative;\">\r\n    <!-- SEMÁFORO HTML 🛑 -->\r\n    <div \r\n      v-if=\"status !== null\" \r\n      :class=\"[\r\n        'position-absolute top-0 start-0 m-2 px-3 py-1 rounded shadow text-center',\r\n        status === 'Seco'   ? 'bg-danger text-white' :\r\n        status === 'Medio'  ? 'bg-warning text-dark' :\r\n        status === 'Húmedo' ? 'bg-success text-white' : ''\r\n      ]\"\r\n      style=\"z-index: 1000; min-width: 80px;\"\r\n    >\r\n      {{ status }}<br/>\r\n      NDWI {{ ndwi !== null ? ndwi.toFixed(2) : '––' }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\nimport { searchLandsat } from '@/api/landsat'\r\nimport { buildNdwiUrl }  from '@/utils/ndwi'\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  props: { coords: { type: Object, required: true } },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      ndwi: null,\r\n      status: null\r\n    }\r\n  },\r\n  async mounted() {\r\n    console.log('MapView mounted, coords=', this.coords)\r\n\r\n    // 1) Inicializa Google Maps\r\n    const google = await new Loader({\r\n      apiKey : process.env.VUE_APP_GOOGLE_KEY,\r\n      version: 'weekly'\r\n    }).load()\r\n\r\n    const { latitude: lat, longitude: lng } = this.coords\r\n    this.map = new google.maps.Map(document.getElementById('map'), {\r\n      center: { lat, lng },\r\n      zoom  : 15,\r\n      disableDefaultUI: true\r\n    })\r\n    new google.maps.Marker({ position: { lat, lng }, map: this.map })\r\n\r\n    // 2) Busca Landsat y pinta semáforo NDWI\r\n    try {\r\n      const ls8 = await searchLandsat({ lat, lng })\r\n      console.log('Landsat result', ls8)\r\n\r\n      // 2a) Overlay NDWI semáforo\r\n      const tpl = buildNdwiUrl({ itemId: ls8.itemId, sas: ls8.sas })\r\n      const ndwiLayer = new google.maps.ImageMapType({\r\n        getTileUrl: (c, z) =>\r\n          tpl.replace('{z}', z).replace('{x}', c.x).replace('{y}', c.y),\r\n        tileSize: new google.maps.Size(256, 256),\r\n        opacity : 0.7,\r\n        name    : 'NDWI'\r\n      })\r\n      this.map.overlayMapTypes.push(ndwiLayer)\r\n\r\n      // 3) Calcula NDWI medio en 100 m alrededor del pin\r\n      const buffer = 0.001\r\n      const geom = {\r\n        type: 'Polygon',\r\n        coordinates: [[\r\n          [lng - buffer, lat - buffer],\r\n          [lng - buffer, lat + buffer],\r\n          [lng + buffer, lat + buffer],\r\n          [lng + buffer, lat - buffer],\r\n          [lng - buffer, lat - buffer]\r\n        ]]\r\n      }\r\n      const expr   = '(nir08 - swir16) / (nir08 + swir16)'\r\n      const urlAgg = 'https://planetarycomputer.microsoft.com/api/data/v1/item/aggregate'\r\n                   + `?collection=landsat-c2-l2&item=${ls8.itemId}`\r\n                   + '&assets=nir08,swir16'\r\n                   + `&expression=${encodeURIComponent(expr)}`\r\n                   + `&geom=${encodeURIComponent(JSON.stringify(geom))}`\r\n                   + (ls8.sas ? `&${ls8.sas}` : '')\r\n\r\n      console.log('Fetching aggregate URL:', urlAgg)\r\n      const aggRes = await fetch(urlAgg)\r\n      const aggJson = await aggRes.json()\r\n      console.log('Aggregate response:', aggJson)\r\n\r\n      this.ndwi = aggJson.result.mean\r\n      this.status = this.ndwi < 0.10\r\n        ? 'Seco'\r\n        : this.ndwi < 0.25\r\n          ? 'Medio'\r\n          : 'Húmedo'\r\n\r\n      console.log(`NDWI medio=${this.ndwi}, status=${this.status}`)\r\n    }\r\n    catch (err) {\r\n      console.error('Error en MapView:', err)\r\n      // para que al menos se muestre algo\r\n      this.status = 'Error'\r\n      this.ndwi = null\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Asegúrate de que el contenedor del mapa tenga position:relative */\r\n#map { position: relative; }\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}