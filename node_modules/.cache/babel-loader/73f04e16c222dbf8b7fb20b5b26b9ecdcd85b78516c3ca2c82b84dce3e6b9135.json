{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchLandsat } from '@/api/landsat';\nimport { buildNdwiUrl } from '@/utils/ndwi';\nexport default {\n  props: {\n    coords: {\n      type: Object,\n      required: true\n    }\n  },\n  data: () => ({\n    map: null,\n    ndwi: null,\n    status: null\n  }),\n  async mounted() {\n    /* 1 ▸ Google Maps + pin ---------------------------------------- */\n    const google = await new Loader({\n      apiKey: process.env.VUE_APP_GOOGLE_KEY,\n      version: 'weekly'\n    }).load();\n    const {\n      latitude: lat,\n      longitude: lng\n    } = this.coords;\n    this.map = new google.maps.Map(document.getElementById('map'), {\n      center: {\n        lat,\n        lng\n      },\n      zoom: 15,\n      disableDefaultUI: true\n    });\n    new google.maps.Marker({\n      position: {\n        lat,\n        lng\n      },\n      map: this.map\n    });\n\n    /* 2 ▸ Landsat + NDWI semáforo ---------------------------------- */\n    try {\n      const ls8 = await searchLandsat({\n        lat,\n        lng\n      });\n      const ndwiT = buildNdwiUrl(ls8);\n\n      // capa raster de colores\n      this.map.overlayMapTypes.push(new google.maps.ImageMapType({\n        getTileUrl: (c, z) => ndwiT.replace('{z}', z).replace('{x}', c.x).replace('{y}', c.y),\n        tileSize: new google.maps.Size(256, 256),\n        opacity: 0.7,\n        name: 'NDWI'\n      }));\n\n      /* 3 ▸ Obtener NDWI medio alrededor del pin ------------------- */\n      const buffer = 0.001; // ≈ 100 m en latitud\n      const geom = {\n        type: 'Polygon',\n        coordinates: [[[lng - buffer, lat - buffer], [lng - buffer, lat + buffer], [lng + buffer, lat + buffer], [lng + buffer, lat - buffer], [lng - buffer, lat - buffer]]]\n      };\n      const expr = '(nir08 - swir16) / (nir08 + swir16)';\n      const urlAgg = 'https://planetarycomputer.microsoft.com/api/data/v1/item/aggregate' + `?collection=landsat-c2-l2&item=${ls8.itemId}` + '&assets=nir08,swir16' + `&expression=${encodeURIComponent(expr)}` + `&geom=${encodeURIComponent(JSON.stringify(geom))}` + (ls8.sas ? `&${ls8.sas}` : '');\n      const {\n        result\n      } = await fetch(urlAgg).then(r => r.json()); // { mean: … }\n      this.ndwi = result.mean;\n\n      /* 4 ▸ Traducir a semáforo ------------------------------------ */\n      this.status = this.ndwi < 0.10 ? 'Seco' : this.ndwi < 0.25 ? 'Medio' : 'Húmedo';\n    } catch (err) {\n      console.warn(err.message);\n    }\n  }\n};","map":{"version":3,"names":["Loader","searchLandsat","buildNdwiUrl","props","coords","type","Object","required","data","map","ndwi","status","mounted","google","apiKey","process","env","VUE_APP_GOOGLE_KEY","version","load","latitude","lat","longitude","lng","maps","Map","document","getElementById","center","zoom","disableDefaultUI","Marker","position","ls8","ndwiT","overlayMapTypes","push","ImageMapType","getTileUrl","c","z","replace","x","y","tileSize","Size","opacity","name","buffer","geom","coordinates","expr","urlAgg","itemId","encodeURIComponent","JSON","stringify","sas","result","fetch","then","r","json","mean","err","console","warn","message"],"sources":["src/components/MapView.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" class=\"w-100 rounded shadow\" style=\"height:350px; position:relative;\">\r\n    <!-- Tarjeta semáforo ---------------------------------------------->\r\n    <div \r\n         :class=\"['position-absolute top-0 start-0 m-2 px-3 py-1 rounded shadow',\r\n                  status==='Seco'     && 'bg-danger text-white',\r\n                  status==='Medio'    && 'bg-warning',\r\n                  status==='Húmedo'   && 'bg-success text-white']\">\r\n      {{ status }} – NDWI {{ ndwi.toFixed(2) }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\nimport { searchLandsat } from '@/api/landsat'\r\nimport { buildNdwiUrl }  from '@/utils/ndwi'\r\n\r\nexport default {\r\n  props : { coords: { type: Object, required: true } },\r\n  data  : () => ({\r\n    map   : null,\r\n    ndwi  : null,\r\n    status: null\r\n  }),\r\n\r\n  async mounted () {\r\n    /* 1 ▸ Google Maps + pin ---------------------------------------- */\r\n    const google = await new Loader({\r\n      apiKey : process.env.VUE_APP_GOOGLE_KEY,\r\n      version: 'weekly'\r\n    }).load()\r\n\r\n    const { latitude: lat, longitude: lng } = this.coords\r\n    this.map = new google.maps.Map(document.getElementById('map'), {\r\n      center:{ lat, lng }, zoom:15, disableDefaultUI:true\r\n    })\r\n    new google.maps.Marker({ position:{ lat, lng }, map:this.map })\r\n\r\n    /* 2 ▸ Landsat + NDWI semáforo ---------------------------------- */\r\n    try {\r\n      const ls8   = await searchLandsat({ lat, lng })\r\n      const ndwiT = buildNdwiUrl(ls8)\r\n\r\n      // capa raster de colores\r\n      this.map.overlayMapTypes.push(new google.maps.ImageMapType({\r\n        getTileUrl:(c,z)=>ndwiT.replace('{z}',z).replace('{x}',c.x).replace('{y}',c.y),\r\n        tileSize:new google.maps.Size(256,256), opacity:0.7, name:'NDWI'\r\n      }))\r\n\r\n      /* 3 ▸ Obtener NDWI medio alrededor del pin ------------------- */\r\n      const buffer = 0.001   // ≈ 100 m en latitud\r\n      const geom = {\r\n        type:'Polygon',\r\n        coordinates:[[\r\n          [lng-buffer, lat-buffer],\r\n          [lng-buffer, lat+buffer],\r\n          [lng+buffer, lat+buffer],\r\n          [lng+buffer, lat-buffer],\r\n          [lng-buffer, lat-buffer]\r\n        ]]\r\n      }\r\n\r\n      const expr   = '(nir08 - swir16) / (nir08 + swir16)'\r\n      const urlAgg = 'https://planetarycomputer.microsoft.com/api/data/v1/item/aggregate'\r\n                   + `?collection=landsat-c2-l2&item=${ls8.itemId}`\r\n                   + '&assets=nir08,swir16'\r\n                   + `&expression=${encodeURIComponent(expr)}`\r\n                   + `&geom=${encodeURIComponent(JSON.stringify(geom))}`\r\n                   + (ls8.sas ? `&${ls8.sas}` : '')\r\n\r\n      const { result } = await fetch(urlAgg).then(r=>r.json())   // { mean: … }\r\n      this.ndwi   = result.mean\r\n\r\n      /* 4 ▸ Traducir a semáforo ------------------------------------ */\r\n      this.status = this.ndwi < 0.10\r\n        ? 'Seco'\r\n        : this.ndwi < 0.25 ? 'Medio' : 'Húmedo'\r\n\r\n    } catch (err) {\r\n      console.warn(err.message)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;;AAcA,SAAAA,MAAA;AACA,SAAAC,aAAA;AACA,SAAAC,YAAA;AAEA;EACAC,KAAA;IAAAC,MAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;EAAA;EACAC,IAAA,EAAAA,CAAA;IACAC,GAAA;IACAC,IAAA;IACAC,MAAA;EACA;EAEA,MAAAC,QAAA;IACA;IACA,MAAAC,MAAA,aAAAb,MAAA;MACAc,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,kBAAA;MACAC,OAAA;IACA,GAAAC,IAAA;IAEA;MAAAC,QAAA,EAAAC,GAAA;MAAAC,SAAA,EAAAC;IAAA,SAAAnB,MAAA;IACA,KAAAK,GAAA,OAAAI,MAAA,CAAAW,IAAA,CAAAC,GAAA,CAAAC,QAAA,CAAAC,cAAA;MACAC,MAAA;QAAAP,GAAA;QAAAE;MAAA;MAAAM,IAAA;MAAAC,gBAAA;IACA;IACA,IAAAjB,MAAA,CAAAW,IAAA,CAAAO,MAAA;MAAAC,QAAA;QAAAX,GAAA;QAAAE;MAAA;MAAAd,GAAA,OAAAA;IAAA;;IAEA;IACA;MACA,MAAAwB,GAAA,SAAAhC,aAAA;QAAAoB,GAAA;QAAAE;MAAA;MACA,MAAAW,KAAA,GAAAhC,YAAA,CAAA+B,GAAA;;MAEA;MACA,KAAAxB,GAAA,CAAA0B,eAAA,CAAAC,IAAA,KAAAvB,MAAA,CAAAW,IAAA,CAAAa,YAAA;QACAC,UAAA,EAAAA,CAAAC,CAAA,EAAAC,CAAA,KAAAN,KAAA,CAAAO,OAAA,QAAAD,CAAA,EAAAC,OAAA,QAAAF,CAAA,CAAAG,CAAA,EAAAD,OAAA,QAAAF,CAAA,CAAAI,CAAA;QACAC,QAAA,MAAA/B,MAAA,CAAAW,IAAA,CAAAqB,IAAA;QAAAC,OAAA;QAAAC,IAAA;MACA;;MAEA;MACA,MAAAC,MAAA;MACA,MAAAC,IAAA;QACA5C,IAAA;QACA6C,WAAA,IACA,CAAA3B,GAAA,GAAAyB,MAAA,EAAA3B,GAAA,GAAA2B,MAAA,GACA,CAAAzB,GAAA,GAAAyB,MAAA,EAAA3B,GAAA,GAAA2B,MAAA,GACA,CAAAzB,GAAA,GAAAyB,MAAA,EAAA3B,GAAA,GAAA2B,MAAA,GACA,CAAAzB,GAAA,GAAAyB,MAAA,EAAA3B,GAAA,GAAA2B,MAAA,GACA,CAAAzB,GAAA,GAAAyB,MAAA,EAAA3B,GAAA,GAAA2B,MAAA,EACA;MACA;MAEA,MAAAG,IAAA;MACA,MAAAC,MAAA,0EACA,kCAAAnB,GAAA,CAAAoB,MAAA,KACA,yBACA,eAAAC,kBAAA,CAAAH,IAAA,MACA,SAAAG,kBAAA,CAAAC,IAAA,CAAAC,SAAA,CAAAP,IAAA,QACAhB,GAAA,CAAAwB,GAAA,OAAAxB,GAAA,CAAAwB,GAAA;MAEA;QAAAC;MAAA,UAAAC,KAAA,CAAAP,MAAA,EAAAQ,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,IAAA;MACA,KAAApD,IAAA,GAAAgD,MAAA,CAAAK,IAAA;;MAEA;MACA,KAAApD,MAAA,QAAAD,IAAA,UACA,SACA,KAAAA,IAAA;IAEA,SAAAsD,GAAA;MACAC,OAAA,CAAAC,IAAA,CAAAF,GAAA,CAAAG,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}