{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\n/* src/api/landsat.js  – v2  (ESM + fetch nativo) */\nconst EARTH_KM_PER_DEG = 111.32; // 1° latitud ≈ 111.32 km :contentReference[oaicite:1]{index=1}\nconst STAC_URL = process.env.VUE_APP_STAC_URL || 'https://planetarycomputer.microsoft.com/api/stac/v1/search';\nexport class StacError extends Error {\n  constructor(msg, status = 0) {\n    super(msg);\n    this.status = status;\n  }\n}\n\n/**\r\n * Consulta STAC y devuelve el primer item Landsat 8 L2 dentro del radio especificado.\r\n * @param   {Object}  o\r\n * @param   {number}  o.lat        Latitud  (°)\r\n * @param   {number}  o.lng        Longitud (°)\r\n * @param   {number}  [o.radiusKm] Radio de búsqueda [km]      (def. 80)\r\n * @param   {number}  [o.daysBack] Antigüedad máxima [días]    (def. 30)\r\n * @param   {number}  [o.cloudMax] % nubes admisible           (def. 100)\r\n * @param   {string}  [o.collection] STAC collection           (def. landsat-8-c2-l2)\r\n * @returns {Promise<LandsatResult>}\r\n */\nexport async function searchLandsat({\n  lat,\n  lng,\n  radiusKm = 50,\n  daysBack = 30,\n  cloudMax = 100,\n  collection = 'landsat-c2-l2',\n  signal\n}) {\n  /* ---- Validaciones básicas ---------------------------------------- */\n  if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n    throw new StacError('Lat/Lon fuera de rango permitido');\n  }\n\n  /* ---- 1. Fechas ISO (hh:mm:ss no requeridas) ---------------------- */\n  const now = new Date();\n  const start = new Date(now.getTime() - daysBack * 86_400_000);\n  const range = `${start.toISOString().slice(0, 10)}/${now.toISOString().slice(0, 10)}`;\n\n  /* ---- 2. Radio → grados, con protecciones ------------------------- */\n  const degLat = radiusKm / EARTH_KM_PER_DEG;\n  const cosLat = Math.cos(lat * Math.PI / 180);\n  const degLon = radiusKm / (EARTH_KM_PER_DEG * Math.max(cosLat, 1e-4)); // evita /0 cerca de polos\n\n  const clamp = (v, min, max) => Math.min(Math.max(v, min), max);\n  const bbox = [clamp(lng - degLon, -180, 180), clamp(lat - degLat, -90, 90), clamp(lng + degLon, -180, 180), clamp(lat + degLat, -90, 90)];\n\n  /* ---- 3. Construir cuerpo STAC ------------------------------------ */\n  const body = {\n    collections: [collection],\n    bbox,\n    datetime: range,\n    limit: 1,\n    query: {\n      'eo:cloud_cover': {\n        lt: cloudMax\n      }\n    }\n  };\n\n  /* ---- 4. Caché en memoria (muy simple) ---------------------------- */\n  const cacheKey = JSON.stringify(body);\n  if (!searchLandsat._cache) searchLandsat._cache = new Map();\n  if (searchLandsat._cache.has(cacheKey)) return structuredClone(searchLandsat._cache.get(cacheKey));\n\n  /* ---- 5. Petición con timeout de 15 s ----------------------------- */\n  const ac = new AbortController();\n  const timer = setTimeout(() => ac.abort(), 15_000);\n  if (signal) signal.addEventListener('abort', () => ac.abort());\n  const res = await fetch(STAC_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body),\n    signal: ac.signal\n  }).finally(() => clearTimeout(timer));\n  if (!res.ok) throw new StacError(await res.text(), res.status);\n  const {\n    features\n  } = await res.json();\n  if (!features.length) {\n    throw new StacError(`Sin escenas en ${radiusKm} km y ${daysBack} días`);\n  }\n\n  /* ---- 6. Firmar assets ------------------------------------------- */\n  /* ---- 6. Firmar assets ------------------------------------------- */\n  const item = features[0];\n\n  // 1️⃣ Obtener un SAS token válido para el storage account y container\n  // extraemos los valores desde las propiedades msft:storage_account y msft:container\n  const storageAccount = item.properties['msft:storage_account'] || 'landsateuwest';\n  const container = item.properties['msft:container'] || 'landsat-c2';\n  const tokenResp = await fetch(`https://planetarycomputer.microsoft.com/api/sas/v1/token/${storageAccount}/${container}`);\n  if (!tokenResp.ok) {\n    throw new StacError(`No se pudo obtener SAS token (${tokenResp.status})`, tokenResp.status);\n  }\n  const {\n    token: sas\n  } = await tokenResp.json(); // ej. \"sv=…&sr=…&sig=…\"\n\n  // 2️⃣ Prepara la función de firma usando ese SAS recién obtenido\n  const sign = href => sas ? `${href}?${sas}` : href;\n\n  // 3️⃣ Escoge el asset que quieras firmar para el quicklook\n  const quickHref = item.assets['rendered_preview']?.href || item.assets['preview']?.href || item.assets['thumbnail']?.href || null;\n\n  // 4️⃣ Devuelve el resultado, incluyendo el token para que MapView.vue lo use\n  const result = {\n    bbox: item.bbox,\n    itemId: item.id,\n    sas,\n    // guardamos el token para MapView.vue\n    ...(quickHref && {\n      assets: {\n        quicklook: sign(quickHref)\n      }\n    }),\n    meta: {\n      id: item.id,\n      datetime: item.properties.datetime,\n      cloud: item.properties['eo:cloud_cover']\n    }\n  };\n  searchLandsat._cache.set(cacheKey, result);\n  return structuredClone(result);\n}","map":{"version":3,"names":["EARTH_KM_PER_DEG","STAC_URL","process","env","VUE_APP_STAC_URL","StacError","Error","constructor","msg","status","searchLandsat","lat","lng","radiusKm","daysBack","cloudMax","collection","signal","now","Date","start","getTime","range","toISOString","slice","degLat","cosLat","Math","cos","PI","degLon","max","clamp","v","min","bbox","body","collections","datetime","limit","query","lt","cacheKey","JSON","stringify","_cache","Map","has","structuredClone","get","ac","AbortController","timer","setTimeout","abort","addEventListener","res","fetch","method","headers","finally","clearTimeout","ok","text","features","json","length","item","storageAccount","properties","container","tokenResp","token","sas","sign","href","quickHref","assets","result","itemId","id","quicklook","meta","cloud","set"],"sources":["C:/Users/ivan.djgonzalez/Desktop/fotoMapa/photo-gps-viewer/src/api/landsat.js"],"sourcesContent":["/* src/api/landsat.js  – v2  (ESM + fetch nativo) */\r\nconst EARTH_KM_PER_DEG = 111.32          // 1° latitud ≈ 111.32 km :contentReference[oaicite:1]{index=1}\r\nconst STAC_URL = process.env.VUE_APP_STAC_URL ||\r\n                  'https://planetarycomputer.microsoft.com/api/stac/v1/search'\r\n\r\nexport class StacError extends Error {\r\n  constructor (msg, status = 0) { super(msg); this.status = status }\r\n}\r\n\r\n/**\r\n * Consulta STAC y devuelve el primer item Landsat 8 L2 dentro del radio especificado.\r\n * @param   {Object}  o\r\n * @param   {number}  o.lat        Latitud  (°)\r\n * @param   {number}  o.lng        Longitud (°)\r\n * @param   {number}  [o.radiusKm] Radio de búsqueda [km]      (def. 80)\r\n * @param   {number}  [o.daysBack] Antigüedad máxima [días]    (def. 30)\r\n * @param   {number}  [o.cloudMax] % nubes admisible           (def. 100)\r\n * @param   {string}  [o.collection] STAC collection           (def. landsat-8-c2-l2)\r\n * @returns {Promise<LandsatResult>}\r\n */\r\nexport async function searchLandsat ({\r\n  lat, lng,\r\n  radiusKm   = 50,\r\n  daysBack   = 30,\r\n  cloudMax   = 100,\r\n  collection = 'landsat-c2-l2',\r\n  signal\r\n}) {\r\n  /* ---- Validaciones básicas ---------------------------------------- */\r\n  if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {\r\n    throw new StacError('Lat/Lon fuera de rango permitido')\r\n  }\r\n\r\n  /* ---- 1. Fechas ISO (hh:mm:ss no requeridas) ---------------------- */\r\n  const now     = new Date()\r\n  const start   = new Date(now.getTime() - daysBack * 86_400_000)\r\n  const range   = `${start.toISOString().slice(0, 10)}/${now.toISOString().slice(0, 10)}`\r\n\r\n  /* ---- 2. Radio → grados, con protecciones ------------------------- */\r\n  const degLat  = radiusKm / EARTH_KM_PER_DEG\r\n  const cosLat  = Math.cos(lat * Math.PI / 180)\r\n  const degLon  = radiusKm / (EARTH_KM_PER_DEG * Math.max(cosLat, 1e-4)) // evita /0 cerca de polos\r\n\r\n  const clamp   = (v, min, max) => Math.min(Math.max(v, min), max)\r\n  const bbox    = [\r\n    clamp(lng - degLon, -180,  180),\r\n    clamp(lat - degLat,  -90,   90),\r\n    clamp(lng + degLon, -180,  180),\r\n    clamp(lat + degLat,  -90,   90)\r\n  ]\r\n\r\n  /* ---- 3. Construir cuerpo STAC ------------------------------------ */\r\n  const body = {\r\n    collections: [collection],\r\n    bbox,\r\n    datetime   : range,\r\n    limit      : 1,\r\n    query      : { 'eo:cloud_cover': { lt: cloudMax } }\r\n  }\r\n\r\n  /* ---- 4. Caché en memoria (muy simple) ---------------------------- */\r\n  const cacheKey = JSON.stringify(body)\r\n  if (!searchLandsat._cache) searchLandsat._cache = new Map()\r\n  if (searchLandsat._cache.has(cacheKey))\r\n    return structuredClone(searchLandsat._cache.get(cacheKey))\r\n\r\n  /* ---- 5. Petición con timeout de 15 s ----------------------------- */\r\n  const ac    = new AbortController()\r\n  const timer = setTimeout(() => ac.abort(), 15_000)\r\n  if (signal) signal.addEventListener('abort', () => ac.abort())\r\n\r\n  const res = await fetch(STAC_URL, {\r\n    method : 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body   : JSON.stringify(body),\r\n    signal : ac.signal\r\n  }).finally(() => clearTimeout(timer))\r\n\r\n  if (!res.ok) throw new StacError(await res.text(), res.status)\r\n\r\n  const { features } = await res.json()\r\n  if (!features.length) {\r\n    throw new StacError(`Sin escenas en ${radiusKm} km y ${daysBack} días`)\r\n  }\r\n\r\n  /* ---- 6. Firmar assets ------------------------------------------- */\r\n /* ---- 6. Firmar assets ------------------------------------------- */\r\nconst item = features[0];\r\n\r\n// 1️⃣ Obtener un SAS token válido para el storage account y container\r\n// extraemos los valores desde las propiedades msft:storage_account y msft:container\r\nconst storageAccount = item.properties['msft:storage_account'] || 'landsateuwest';\r\nconst container      = item.properties['msft:container']       || 'landsat-c2';\r\n\r\nconst tokenResp = await fetch(\r\n  `https://planetarycomputer.microsoft.com/api/sas/v1/token/${storageAccount}/${container}`\r\n);\r\nif (!tokenResp.ok) {\r\n  throw new StacError(`No se pudo obtener SAS token (${tokenResp.status})`, tokenResp.status);\r\n}\r\nconst { token: sas } = await tokenResp.json();  // ej. \"sv=…&sr=…&sig=…\"\r\n\r\n// 2️⃣ Prepara la función de firma usando ese SAS recién obtenido\r\nconst sign = href => sas ? `${href}?${sas}` : href;\r\n\r\n// 3️⃣ Escoge el asset que quieras firmar para el quicklook\r\nconst quickHref =\r\n  item.assets['rendered_preview']?.href ||\r\n  item.assets['preview']?.href           ||\r\n  item.assets['thumbnail']?.href         ||\r\n  null;\r\n\r\n// 4️⃣ Devuelve el resultado, incluyendo el token para que MapView.vue lo use\r\nconst result = {\r\n  bbox  : item.bbox,\r\n  itemId: item.id,\r\n  sas,    // guardamos el token para MapView.vue\r\n  ...(quickHref && { assets: { quicklook: sign(quickHref) }}),\r\n  meta  : {\r\n    id      : item.id,\r\n    datetime: item.properties.datetime,\r\n    cloud   : item.properties['eo:cloud_cover']\r\n  }\r\n};\r\n\r\nsearchLandsat._cache.set(cacheKey, result);\r\nreturn structuredClone(result);\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}