{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// src/utils/ndwi-client.js\nimport { fromUrl } from 'geotiff';\nimport proj4 from 'proj4';\n\n// Definimos las proyecciones para reproyectar coordenadas\nproj4.defs('EPSG:4326', '+proj=longlat +datum=WGS84 +no_defs');\nproj4.defs('EPSG:32614', '+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs');\n\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud (EPSG:4326)\r\n * @param {number} lng     Longitud (EPSG:4326)\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\n  // 1) Abre ambos COGs\n  const [tiffNIR, tiffSWIR] = await Promise.all([fromUrl(nirUrl), fromUrl(swirUrl)]);\n  const [imgNIR, imgSWIR] = await Promise.all([tiffNIR.getImage(), tiffSWIR.getImage()]);\n\n  // 2) Reproyectar lat/lng a coordenadas de mapa (UTM14N)\n  const [xMap, yMap] = proj4('EPSG:4326', 'EPSG:32614', [lng, lat]);\n  console.log('üìê Reprojected coordinates:', {\n    xMap,\n    yMap\n  });\n\n  // 3) Obtener georreferenciaci√≥n del COG\n  const [originX, originY] = imgNIR.getOrigin(); // [x0, y0]\n  const [resX, resY] = imgNIR.getResolution(); // [pixelWidth, pixelHeight]\n  const width = imgNIR.getWidth();\n  const height = imgNIR.getHeight();\n  console.log('üè∑Ô∏è GeoTIFF info ‚Üí origin:', originX, originY, 'resolution:', resX, resY, 'dims:', width, height);\n\n  // 4) Calcular columna/fila de p√≠xel central\n  const col = Math.floor((xMap - originX) / resX);\n  const row = Math.floor((originY - yMap) / Math.abs(resY));\n\n  // 5) Definir ventana de muestreo de 3√ó3 p√≠xeles\n  const half = 1;\n  const col0 = Math.max(0, col - half);\n  const row0 = Math.max(0, row - half);\n  const col1 = Math.min(width, col + half + 1);\n  const row1 = Math.min(height, row + half + 1);\n  console.log('üî≥ Sampling window ‚Üí', {\n    col0,\n    row0,\n    col1,\n    row1\n  });\n\n  // 6) Leer ventana de cada banda\n  const [nirVals] = await imgNIR.readRasters({\n    window: [col0, row0, col1, row1],\n    samples: [0]\n  });\n  const [swirVals] = await imgSWIR.readRasters({\n    window: [col0, row0, col1, row1],\n    samples: [0]\n  });\n  console.log('üìä nirVals raw:', nirVals);\n  console.log('üìä swirVals raw:', swirVals);\n\n  // 7) Convertir de DN a reflectancia y calcular NDWI, filtrando nodata\n  const SCALE = 0.0000275;\n  const OFFSET = -0.2;\n  const nodataValue = 0; // seg√∫n metadata de Landsat SR\n  const ndwiArr = [];\n  for (let i = 0; i < nirVals.length; i++) {\n    const rawNir = nirVals[i];\n    const rawSwir = swirVals[i];\n    // descartar p√≠xeles sin datos (DN = nodataValue)\n    if (rawNir === nodataValue || rawSwir === nodataValue) continue;\n    // convertir a reflectancia de superficie\n    const reflNir = rawNir * SCALE + OFFSET;\n    const reflSwir = rawSwir * SCALE + OFFSET;\n    // calcular NDWI\n    const val = (reflNir - reflSwir) / (reflNir + reflSwir);\n    ndwiArr.push(val);\n    console.log(`   ‚Üí NDWI p√≠xel ${i}:`, val);\n  }\n\n  // 8) Retornar null si no hay p√≠xeles v√°lidos\n  if (ndwiArr.length === 0) {\n    console.warn('‚ö†Ô∏è No valid pixels for NDWI despu√©s de conversi√≥n a reflectancia');\n    return null;\n  }\n\n  // 9) Promediar NDWI y retornar\n  const sum = ndwiArr.reduce((acc, v) => acc + v, 0);\n  const mean = sum / ndwiArr.length;\n  console.log('‚ûó NDWI promedio:', mean);\n  return mean;\n}","map":{"version":3,"names":["fromUrl","proj4","defs","sampleNdwi","nirUrl","swirUrl","lat","lng","tiffNIR","tiffSWIR","Promise","all","imgNIR","imgSWIR","getImage","xMap","yMap","console","log","originX","originY","getOrigin","resX","resY","getResolution","width","getWidth","height","getHeight","col","Math","floor","row","abs","half","col0","max","row0","col1","min","row1","nirVals","readRasters","window","samples","swirVals","SCALE","OFFSET","nodataValue","ndwiArr","i","length","rawNir","rawSwir","reflNir","reflSwir","val","push","warn","sum","reduce","acc","v","mean"],"sources":["C:/Users/ian_c/OneDrive/Desktop/ARIDA/FrontEnd-Arida/src/utils/ndwi-client.js"],"sourcesContent":["// src/utils/ndwi-client.js\r\nimport { fromUrl } from 'geotiff'\r\nimport proj4 from 'proj4'\r\n\r\n// Definimos las proyecciones para reproyectar coordenadas\r\nproj4.defs('EPSG:4326', '+proj=longlat +datum=WGS84 +no_defs')\r\nproj4.defs('EPSG:32614', '+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs')\r\n\r\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud (EPSG:4326)\r\n * @param {number} lng     Longitud (EPSG:4326)\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\r\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\r\n  // 1) Abre ambos COGs\r\n  const [tiffNIR, tiffSWIR] = await Promise.all([\r\n    fromUrl(nirUrl),\r\n    fromUrl(swirUrl)\r\n  ])\r\n  const [imgNIR, imgSWIR] = await Promise.all([\r\n    tiffNIR.getImage(),\r\n    tiffSWIR.getImage()\r\n  ])\r\n\r\n  // 2) Reproyectar lat/lng a coordenadas de mapa (UTM14N)\r\n  const [xMap, yMap] = proj4('EPSG:4326', 'EPSG:32614', [lng, lat])\r\n  console.log('üìê Reprojected coordinates:', { xMap, yMap })\r\n\r\n  // 3) Obtener georreferenciaci√≥n del COG\r\n  const [originX, originY] = imgNIR.getOrigin()      // [x0, y0]\r\n  const [resX, resY]       = imgNIR.getResolution()  // [pixelWidth, pixelHeight]\r\n  const width  = imgNIR.getWidth()\r\n  const height = imgNIR.getHeight()\r\n  console.log('üè∑Ô∏è GeoTIFF info ‚Üí origin:', originX, originY, 'resolution:', resX, resY, 'dims:', width, height)\r\n\r\n  // 4) Calcular columna/fila de p√≠xel central\r\n  const col = Math.floor((xMap - originX) / resX)\r\n  const row = Math.floor((originY - yMap) / Math.abs(resY))\r\n\r\n  // 5) Definir ventana de muestreo de 3√ó3 p√≠xeles\r\n  const half = 1\r\n  const col0 = Math.max(0, col - half)\r\n  const row0 = Math.max(0, row - half)\r\n  const col1 = Math.min(width, col + half + 1)\r\n  const row1 = Math.min(height, row + half + 1)\r\n  console.log('üî≥ Sampling window ‚Üí', { col0, row0, col1, row1 })\r\n\r\n  // 6) Leer ventana de cada banda\r\n  const [nirVals] = await imgNIR.readRasters({ window: [col0, row0, col1, row1], samples: [0] })\r\n  const [swirVals] = await imgSWIR.readRasters({ window: [col0, row0, col1, row1], samples: [0] })\r\n  console.log('üìä nirVals raw:', nirVals)\r\n  console.log('üìä swirVals raw:', swirVals)\r\n\r\n  // 7) Convertir de DN a reflectancia y calcular NDWI, filtrando nodata\r\nconst SCALE = 0.0000275\r\nconst OFFSET = -0.2\r\nconst nodataValue = 0  // seg√∫n metadata de Landsat SR\r\nconst ndwiArr = []\r\nfor (let i = 0; i < nirVals.length; i++) {\r\n  const rawNir = nirVals[i]\r\n  const rawSwir = swirVals[i]\r\n  // descartar p√≠xeles sin datos (DN = nodataValue)\r\n  if (rawNir === nodataValue || rawSwir === nodataValue) continue\r\n  // convertir a reflectancia de superficie\r\n  const reflNir = rawNir * SCALE + OFFSET\r\n  const reflSwir = rawSwir * SCALE + OFFSET\r\n  // calcular NDWI\r\n  const val = (reflNir - reflSwir) / (reflNir + reflSwir)\r\n  ndwiArr.push(val)\r\n  console.log(`   ‚Üí NDWI p√≠xel ${i}:`, val)\r\n}\r\n\r\n// 8) Retornar null si no hay p√≠xeles v√°lidos\r\nif (ndwiArr.length === 0) {\r\n  console.warn('‚ö†Ô∏è No valid pixels for NDWI despu√©s de conversi√≥n a reflectancia')\r\n  return null\r\n}\r\n\r\n// 9) Promediar NDWI y retornar\r\nconst sum = ndwiArr.reduce((acc, v) => acc + v, 0)\r\nconst mean = sum / ndwiArr.length\r\nconsole.log('‚ûó NDWI promedio:', mean)\r\nreturn mean\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}