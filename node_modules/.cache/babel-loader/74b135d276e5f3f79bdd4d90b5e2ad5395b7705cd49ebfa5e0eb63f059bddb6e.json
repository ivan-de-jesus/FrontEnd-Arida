{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchLandsat } from '@/api/landsat';\nimport { sampleNdwi } from '@/utils/ndwi-client';\nexport default {\n  name: 'MapView',\n  props: {\n    coords: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      map: null\n    };\n  },\n  async mounted() {\n    const {\n      latitude: lat,\n      longitude: lng\n    } = this.coords;\n\n    /**\r\n     * === Flujo de proceso ===\r\n     * 1Ô∏è‚É£ Inicializar Google Maps: se carga el mapa centrado en las coordenadas\r\n     *    provistas por el componente padre (PhotoCapture).\r\n     * 2Ô∏è‚É£ B√∫squeda de escena Landsat:\r\n     *    - Se llama a la funci√≥n searchLandsat para obtener metadatos de la escena m√°s\r\n     *      cercana (identificador, bounding box y URLs de las bandas con token).\r\n     * 3Ô∏è‚É£ Preparaci√≥n de URLs COG:\r\n     *    - Se limpian las URLs de par√°metros extra y se obtiene un SAS token v√°lido.\r\n     *    - Se construyen las URLs completas para acceder a los COGs de NIR y SWIR.\r\n     * 4Ô∏è‚É£ C√°lculo de NDWI con geotiff.js:\r\n     *    - La funci√≥n sampleNdwi reproyecta coordenadas, lee un bloque de p√≠xeles\r\n     *      alrededor del punto y calcula el √≠ndice de humedad (NDWI).\r\n     *    - Si arroja null (p.ej., p√≠xel nodata), se recurre a un fallback.\r\n     * 5Ô∏è‚É£ Fallback STAC aggregate:\r\n     *    - Se utiliza el endpoint /aggregate con el bbox completo para obtener un NDWI promedio\r\n     *      de la escena si la lectura de GeoTIFF falla.\r\n     * 6Ô∏è‚É£ Clasificaci√≥n y emisi√≥n:\r\n     *    - Con el valor medio de NDWI, se clasifica el estado (Seco, Medio, H√∫medo) y\r\n     *      se emite un evento al componente padre para actualizar el sem√°foro en pantalla.\r\n     */\n\n    // 1Ô∏è‚É£ Cargar Google Maps y colocar marcador\n    try {\n      const google = await new Loader({\n        apiKey: process.env.VUE_APP_GOOGLE_KEY,\n        version: 'weekly'\n      }).load();\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: {\n          lat,\n          lng\n        },\n        zoom: 15,\n        disableDefaultUI: true\n      });\n      new google.maps.Marker({\n        position: {\n          lat,\n          lng\n        },\n        map: this.map\n      });\n    } catch (err) {\n      console.warn('Google Maps no se pudo cargar:', err);\n    }\n\n    // 2Ô∏è‚É£ Inicializar variables de resultado\n    let meanNdwi = null;\n    let status = 'Sin datos';\n    try {\n      // 3Ô∏è‚É£ B√∫squeda de escena Landsat 8/9\n      const ls8 = await searchLandsat({\n        lat,\n        lng\n      });\n\n      // 4Ô∏è‚É£ Preparar URLs sin par√°metros existentes\n      const blobNir = ls8.assets.nir08.split('?')[0];\n      const blobSwir = ls8.assets.swir16.split('?')[0];\n\n      // 5Ô∏è‚É£ Solicitud de token SAS para el container\n      const account = 'landsateuwest';\n      const container = 'landsat-c2';\n      const tokenResp = await fetch(`https://planetarycomputer.microsoft.com/api/sas/v1/token/${account}/${container}`);\n      if (!tokenResp.ok) throw new Error(`Token SAS falla: ${tokenResp.status}`);\n      const {\n        token\n      } = await tokenResp.json();\n\n      // 6Ô∏è‚É£ URLs COG firmadas\n      const nirUrl = `${blobNir}?${token}`;\n      const swirUrl = `${blobSwir}?${token}`;\n      console.log('üîó nirUrl:', nirUrl);\n      console.log('üîó swirUrl:', swirUrl);\n\n      // 7Ô∏è‚É£ C√°lculo NDWI mediante lectura directa de GeoTIFF\n      console.log('‚ñ∂Ô∏è Llamando a sampleNdwi‚Ä¶');\n      meanNdwi = await sampleNdwi(nirUrl, swirUrl, lat, lng);\n      console.log('‚Üê sampleNdwi result:', meanNdwi);\n\n      // 8Ô∏è‚É£ Fallback STAC aggregate si no hay datos directos\n      if (meanNdwi === null) {\n        console.log('‚ö†Ô∏è NDWI null; intentando fallback STAC aggregate‚Ä¶');\n        const [west, south, east, north] = ls8.bbox;\n        const bboxParam = `${west},${south},${east},${north}`;\n        const urlAgg = `https://planetarycomputer.microsoft.com/api/data/v1/collections/landsat-c2-l2` + `/items/${encodeURIComponent(ls8.itemId)}/aggregate` + `?assets=nir08,swir16` + `&expression=${encodeURIComponent('(nir08 - swir16)/(nir08 + swir16)')}` + `&bbox=${encodeURIComponent(bboxParam)}` + `&${token}`;\n        console.log('‚û∞ URL fallback aggregate:', urlAgg);\n        const aggRes = await fetch(urlAgg);\n        if (aggRes.ok) {\n          const aggJson = await aggRes.json();\n          meanNdwi = aggJson.result?.mean ?? aggJson.mean ?? null;\n          console.log('‚Üê aggregate result:', meanNdwi);\n        } else {\n          console.warn('Fallback aggregate falla:', aggRes.status);\n        }\n      }\n\n      // 9Ô∏è‚É£ Clasificar estado de humedad\n      if (meanNdwi !== null) {\n        if (meanNdwi < 0.10) status = 'Seco';else if (meanNdwi < 0.25) status = 'Medio';else status = 'H√∫medo';\n      }\n    } catch (e) {\n      console.error('Error calculando NDWI:', e);\n    }\n\n    // üîü Emitir evento al componente padre\n    console.log('‚ú® Emitiendo ndwi-status:', meanNdwi, status);\n    this.$emit('ndwi-status', {\n      ndwi: meanNdwi,\n      status\n    });\n  }\n};","map":{"version":3,"names":["Loader","searchLandsat","sampleNdwi","name","props","coords","type","Object","required","data","map","mounted","latitude","lat","longitude","lng","google","apiKey","process","env","VUE_APP_GOOGLE_KEY","version","load","maps","Map","document","getElementById","center","zoom","disableDefaultUI","Marker","position","err","console","warn","meanNdwi","status","ls8","blobNir","assets","nir08","split","blobSwir","swir16","account","container","tokenResp","fetch","ok","Error","token","json","nirUrl","swirUrl","log","west","south","east","north","bbox","bboxParam","urlAgg","encodeURIComponent","itemId","aggRes","aggJson","result","mean","e","error","$emit","ndwi"],"sources":["src/components/MapView.vue"],"sourcesContent":["<!-- src/components/MapView.vue -->\r\n<template>\r\n  <div id=\"map\" class=\"w-100 rounded shadow\" style=\"height:350px; position: relative;\">\r\n    <!-- El mapa se inicializa aqu√≠ -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\nimport { searchLandsat } from '@/api/landsat'\r\nimport { sampleNdwi } from '@/utils/ndwi-client'\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  props: {\r\n    coords: { type: Object, required: true }\r\n  },\r\n  data() {\r\n    return { map: null }\r\n  },\r\n  async mounted() {\r\n    const { latitude: lat, longitude: lng } = this.coords\r\n\r\n    /**\r\n     * === Flujo de proceso ===\r\n     * 1Ô∏è‚É£ Inicializar Google Maps: se carga el mapa centrado en las coordenadas\r\n     *    provistas por el componente padre (PhotoCapture).\r\n     * 2Ô∏è‚É£ B√∫squeda de escena Landsat:\r\n     *    - Se llama a la funci√≥n searchLandsat para obtener metadatos de la escena m√°s\r\n     *      cercana (identificador, bounding box y URLs de las bandas con token).\r\n     * 3Ô∏è‚É£ Preparaci√≥n de URLs COG:\r\n     *    - Se limpian las URLs de par√°metros extra y se obtiene un SAS token v√°lido.\r\n     *    - Se construyen las URLs completas para acceder a los COGs de NIR y SWIR.\r\n     * 4Ô∏è‚É£ C√°lculo de NDWI con geotiff.js:\r\n     *    - La funci√≥n sampleNdwi reproyecta coordenadas, lee un bloque de p√≠xeles\r\n     *      alrededor del punto y calcula el √≠ndice de humedad (NDWI).\r\n     *    - Si arroja null (p.ej., p√≠xel nodata), se recurre a un fallback.\r\n     * 5Ô∏è‚É£ Fallback STAC aggregate:\r\n     *    - Se utiliza el endpoint /aggregate con el bbox completo para obtener un NDWI promedio\r\n     *      de la escena si la lectura de GeoTIFF falla.\r\n     * 6Ô∏è‚É£ Clasificaci√≥n y emisi√≥n:\r\n     *    - Con el valor medio de NDWI, se clasifica el estado (Seco, Medio, H√∫medo) y\r\n     *      se emite un evento al componente padre para actualizar el sem√°foro en pantalla.\r\n     */\r\n\r\n    // 1Ô∏è‚É£ Cargar Google Maps y colocar marcador\r\n    try {\r\n      const google = await new Loader({\r\n        apiKey: process.env.VUE_APP_GOOGLE_KEY,\r\n        version: 'weekly'\r\n      }).load()\r\n      this.map = new google.maps.Map(document.getElementById('map'), {\r\n        center: { lat, lng },\r\n        zoom: 15,\r\n        disableDefaultUI: true\r\n      })\r\n      new google.maps.Marker({ position: { lat, lng }, map: this.map })\r\n    } catch (err) {\r\n      console.warn('Google Maps no se pudo cargar:', err)\r\n    }\r\n\r\n    // 2Ô∏è‚É£ Inicializar variables de resultado\r\n    let meanNdwi = null\r\n    let status = 'Sin datos'\r\n\r\n    try {\r\n      // 3Ô∏è‚É£ B√∫squeda de escena Landsat 8/9\r\n      const ls8 = await searchLandsat({ lat, lng })\r\n\r\n      // 4Ô∏è‚É£ Preparar URLs sin par√°metros existentes\r\n      const blobNir  = ls8.assets.nir08.split('?')[0]\r\n      const blobSwir = ls8.assets.swir16.split('?')[0]\r\n\r\n      // 5Ô∏è‚É£ Solicitud de token SAS para el container\r\n      const account = 'landsateuwest'\r\n      const container = 'landsat-c2'\r\n      const tokenResp = await fetch(\r\n        `https://planetarycomputer.microsoft.com/api/sas/v1/token/${account}/${container}`\r\n      )\r\n      if (!tokenResp.ok) throw new Error(`Token SAS falla: ${tokenResp.status}`)\r\n      const { token } = await tokenResp.json()\r\n\r\n      // 6Ô∏è‚É£ URLs COG firmadas\r\n      const nirUrl  = `${blobNir}?${token}`\r\n      const swirUrl = `${blobSwir}?${token}`\r\n      console.log('üîó nirUrl:', nirUrl)\r\n      console.log('üîó swirUrl:', swirUrl)\r\n\r\n      // 7Ô∏è‚É£ C√°lculo NDWI mediante lectura directa de GeoTIFF\r\n      console.log('‚ñ∂Ô∏è Llamando a sampleNdwi‚Ä¶')\r\n      meanNdwi = await sampleNdwi(nirUrl, swirUrl, lat, lng)\r\n      console.log('‚Üê sampleNdwi result:', meanNdwi)\r\n\r\n      // 8Ô∏è‚É£ Fallback STAC aggregate si no hay datos directos\r\n      if (meanNdwi === null) {\r\n        console.log('‚ö†Ô∏è NDWI null; intentando fallback STAC aggregate‚Ä¶')\r\n        const [west, south, east, north] = ls8.bbox\r\n        const bboxParam = `${west},${south},${east},${north}`\r\n        const urlAgg =\r\n          `https://planetarycomputer.microsoft.com/api/data/v1/collections/landsat-c2-l2` +\r\n          `/items/${encodeURIComponent(ls8.itemId)}/aggregate` +\r\n          `?assets=nir08,swir16` +\r\n          `&expression=${encodeURIComponent('(nir08 - swir16)/(nir08 + swir16)')}` +\r\n          `&bbox=${encodeURIComponent(bboxParam)}` +\r\n          `&${token}`\r\n        console.log('‚û∞ URL fallback aggregate:', urlAgg)\r\n        const aggRes = await fetch(urlAgg)\r\n        if (aggRes.ok) {\r\n          const aggJson = await aggRes.json()\r\n          meanNdwi = aggJson.result?.mean ?? aggJson.mean ?? null\r\n          console.log('‚Üê aggregate result:', meanNdwi)\r\n        } else {\r\n          console.warn('Fallback aggregate falla:', aggRes.status)\r\n        }\r\n      }\r\n\r\n      // 9Ô∏è‚É£ Clasificar estado de humedad\r\n      if (meanNdwi !== null) {\r\n        if (meanNdwi < 0.10) status = 'Seco'\r\n        else if (meanNdwi < 0.25) status = 'Medio'\r\n        else status = 'H√∫medo'\r\n      }\r\n    } catch (e) {\r\n      console.error('Error calculando NDWI:', e)\r\n    }\r\n\r\n    // üîü Emitir evento al componente padre\r\n    console.log('‚ú® Emitiendo ndwi-status:', meanNdwi, status)\r\n    this.$emit('ndwi-status', { ndwi: meanNdwi, status })\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  position: relative;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}