{"ast":null,"code":"import * as exifr from \"exifr\";\nexport default {\n  name: \"PhotoCapture\",\n  data() {\n    return {\n      preview: null,\n      // URL.createObjectURL\n      coords: null,\n      // { latitude, longitude }\n      error: null,\n      radiusKm: 15,\n      daysBack: 30,\n      cloudMax: 15\n    };\n  },\n  computed: {\n    ready() {\n      return this.coords && Number.isFinite(this.coords.latitude) && Number.isFinite(this.coords.longitude);\n    }\n  },\n  methods: {\n    /** abre el selector si el usuario pulsa el botón antes de elegir archivo */\n    openSelector() {\n      this.$el.querySelector(\"input[type=file]\").click();\n    },\n    async handleFile(ev) {\n      this.error = null;\n      this.coords = null;\n      const file = ev.target.files[0];\n      if (!file) return;\n\n      /* miniatura */\n      this.preview && URL.revokeObjectURL(this.preview);\n      this.preview = URL.createObjectURL(file);\n\n      /* metadatos EXIF */\n      try {\n        const gps = await exifr.gps(file);\n        if (gps?.latitude && gps?.longitude) {\n          this.coords = {\n            latitude: Number(gps.latitude),\n            longitude: Number(gps.longitude)\n          };\n        } else {\n          this.error = \"La imagen no contiene metadatos GPS.\";\n        }\n      } catch (err) {\n        console.error(err);\n        this.error = \"Error al leer metadatos EXIF.\";\n      }\n    },\n    emitirCoords() {\n      // Emitir coords y parámetros para searchLandsat\n      this.$emit('captured', {\n        coords: this.coords,\n        params: {\n          radiusKm: this.radiusKm,\n          daysBack: this.daysBack,\n          cloudMax: this.cloudMax\n        }\n      });\n    }\n  },\n  beforeUnmount() {\n    /* libera la URL de la miniatura */\n    if (this.preview) URL.revokeObjectURL(this.preview);\n  }\n};","map":{"version":3,"names":["exifr","name","data","preview","coords","error","radiusKm","daysBack","cloudMax","computed","ready","Number","isFinite","latitude","longitude","methods","openSelector","$el","querySelector","click","handleFile","ev","file","target","files","URL","revokeObjectURL","createObjectURL","gps","err","console","emitirCoords","$emit","params","beforeUnmount"],"sources":["src/components/PhotoCapture.vue"],"sourcesContent":["<!-- src/components/PhotoCapture.vue -->\r\n<template>\r\n  <div class=\"d-flex flex-column align-items-center\">\r\n    <!-- CARD: miniatura o placeholder. Al hacer clic abre el file input oculto -->\r\n   <!-- CARD contenedora cuadrada con sombra -->\r\n<div\r\n  class=\"card shadow photo-box mb-3\"\r\n  style=\"width:320px; height:320px;\"  \r\n>\r\n  <label\r\n    class=\"d-block w-100 h-100 upload-card m-0\"\r\n    style=\"cursor:pointer;\"\r\n  >\r\n    <input\r\n      type=\"file\"\r\n      accept=\"image/*;capture=camera\"\r\n      class=\"d-none\"\r\n      @change=\"handleFile\"\r\n    />\r\n\r\n    <!-- Cuadrado interno que se adapta al 100 % de la card -->\r\n    <div class=\"w-100 h-100 position-relative\">\r\n      <!-- PREVIEW -->\r\n      <img\r\n        v-if=\"preview\"\r\n        :src=\"preview\"\r\n        class=\"w-100 h-100 object-fit-cover rounded\"\r\n      />\r\n\r\n      <!-- PLACEHOLDER -->\r\n      <div\r\n        v-else\r\n        class=\"placeholder-icon d-flex flex-column\r\n               justify-content-center align-items-center\r\n               text-secondary w-100 h-100\"\r\n      >\r\n        <i class=\"bi bi-upload\" style=\"font-size:4rem;\"></i>\r\n        <p class=\"mt-2 mb-0\">Subir imagen de la<br />ubicación</p>\r\n      </div>\r\n    </div>\r\n  </label>\r\n</div>\r\n\r\n\r\n    <!-- CARD: coordenadas -->\r\n    <div v-if=\"ready\" class=\"card mb-3 w-100\" style=\"max-width: 320px\">\r\n      <div class=\"card-body py-2\">\r\n        <strong>Coordenadas:</strong><br />\r\n        {{ coords.latitude.toFixed(6) }}, {{ coords.longitude.toFixed(6) }}\r\n      </div>\r\n    </div>\r\n\r\n     <!-- SLIDERS PARA PARÁMETROS DE BUSQUEDA LANDSAT -->\r\n    <div class=\"w-100 mb-3\" style=\"max-width: 320px;\">\r\n      <div class=\"mb-2\">\r\n        <label>Radio (km): {{ radiusKm }}</label>\r\n        <input type=\"range\" v-model.number=\"radiusKm\" :min=\"1\" :max=\"100\" />\r\n      </div>\r\n      <div class=\"mb-2\">\r\n        <label>Días atrás: {{ daysBack }}</label>\r\n        <input type=\"range\" v-model.number=\"daysBack\" :min=\"1\" :max=\"90\" />\r\n      </div>\r\n      <div>\r\n        <label>% Nubes máximo: {{ cloudMax }}</label>\r\n        <input type=\"range\" v-model.number=\"cloudMax\" :min=\"0\" :max=\"100\" />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- BOTÓN -->\r\n    <button\r\n      class=\"btn w-100 d-flex justify-content-center align-items-center gap-2\"\r\n      :class=\"ready ? 'btn-success' : 'btn-upload'\"\r\n      style=\"max-width: 320px\"\r\n      @click=\"ready ? emitirCoords() : openSelector()\"\r\n    >\r\n      <i :class=\"ready ? 'bi bi-geo-alt-fill' : 'bi bi-upload'\"></i>\r\n      <span>{{ ready ? \"Ver mapa\" : \"Subir\" }}</span>\r\n    </button>\r\n    <!-- ERROR -->\r\n    <div\r\n      v-if=\"error\"\r\n      class=\"alert alert-warning mt-3 w-100\"\r\n      style=\"max-width: 320px\"\r\n    >\r\n      {{ error }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as exifr from \"exifr\";\r\n\r\nexport default {\r\n  name: \"PhotoCapture\",\r\n  data() {\r\n    return {\r\n      preview: null, // URL.createObjectURL\r\n      coords: null, // { latitude, longitude }\r\n      error: null,\r\n        radiusKm: 15,\r\n      daysBack: 30,\r\n      cloudMax: 15,\r\n    };\r\n  },\r\n  computed: {\r\n    ready() {\r\n      return (\r\n        this.coords &&\r\n        Number.isFinite(this.coords.latitude) &&\r\n        Number.isFinite(this.coords.longitude)\r\n      );\r\n    },\r\n  },\r\n  methods: {\r\n    /** abre el selector si el usuario pulsa el botón antes de elegir archivo */\r\n    openSelector() {\r\n      this.$el.querySelector(\"input[type=file]\").click();\r\n    },\r\n\r\n    async handleFile(ev) {\r\n      this.error = null;\r\n      this.coords = null;\r\n      const file = ev.target.files[0];\r\n      if (!file) return;\r\n\r\n      /* miniatura */\r\n      this.preview && URL.revokeObjectURL(this.preview);\r\n      this.preview = URL.createObjectURL(file);\r\n\r\n      /* metadatos EXIF */\r\n      try {\r\n        const gps = await exifr.gps(file);\r\n        if (gps?.latitude && gps?.longitude) {\r\n          this.coords = {\r\n            latitude: Number(gps.latitude),\r\n            longitude: Number(gps.longitude),\r\n          };\r\n        } else {\r\n          this.error = \"La imagen no contiene metadatos GPS.\";\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error = \"Error al leer metadatos EXIF.\";\r\n      }\r\n    },\r\n\r\n   emitirCoords() {\r\n      // Emitir coords y parámetros para searchLandsat\r\n      this.$emit('captured', {\r\n        coords: this.coords,\r\n        params: {\r\n          radiusKm: this.radiusKm,\r\n          daysBack: this.daysBack,\r\n          cloudMax: this.cloudMax,\r\n        }\r\n      });\r\n    },\r\n  \r\n  },\r\n  beforeUnmount() {\r\n    /* libera la URL de la miniatura */\r\n    if (this.preview) URL.revokeObjectURL(this.preview);\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.photo-box {             /* 320 × 320 con sombra de Bootstrap */\r\n  overflow: hidden;      /* evita que la imagen sobresalga */\r\n}\r\n\r\n.upload-card {           /* borde punteado interno */\r\n  border: 2px dashed #ced4da;\r\n}\r\n\r\n.placeholder-icon { user-select: none; }\r\n.photo-box img { object-fit: cover; }  /* llena el cuadrado sin deformar */\r\n\r\n.btn-upload {\r\n  background-color: #0c153f !important;\r\n  color: #fff !important;\r\n  border: none;\r\n}\r\n\r\n.btn-upload:hover,\r\n.btn-upload:focus {\r\n  background-color: #0c153f !important; /* un tono un poco más claro para hover/focus */\r\n  color: #fff !important;\r\n}\r\n.upload-card {\r\n  border: 2px dashed #ced4da;\r\n}\r\n.placeholder-icon {\r\n  user-select: none;\r\n}\r\n</style>\r\n"],"mappings":"AA0FA,YAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,MAAA;MAAA;MACAC,KAAA;MACAC,QAAA;MACAC,QAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,MAAA;MACA,OACA,KAAAN,MAAA,IACAO,MAAA,CAAAC,QAAA,MAAAR,MAAA,CAAAS,QAAA,KACAF,MAAA,CAAAC,QAAA,MAAAR,MAAA,CAAAU,SAAA;IAEA;EACA;EACAC,OAAA;IACA;IACAC,aAAA;MACA,KAAAC,GAAA,CAAAC,aAAA,qBAAAC,KAAA;IACA;IAEA,MAAAC,WAAAC,EAAA;MACA,KAAAhB,KAAA;MACA,KAAAD,MAAA;MACA,MAAAkB,IAAA,GAAAD,EAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAF,IAAA;;MAEA;MACA,KAAAnB,OAAA,IAAAsB,GAAA,CAAAC,eAAA,MAAAvB,OAAA;MACA,KAAAA,OAAA,GAAAsB,GAAA,CAAAE,eAAA,CAAAL,IAAA;;MAEA;MACA;QACA,MAAAM,GAAA,SAAA5B,KAAA,CAAA4B,GAAA,CAAAN,IAAA;QACA,IAAAM,GAAA,EAAAf,QAAA,IAAAe,GAAA,EAAAd,SAAA;UACA,KAAAV,MAAA;YACAS,QAAA,EAAAF,MAAA,CAAAiB,GAAA,CAAAf,QAAA;YACAC,SAAA,EAAAH,MAAA,CAAAiB,GAAA,CAAAd,SAAA;UACA;QACA;UACA,KAAAT,KAAA;QACA;MACA,SAAAwB,GAAA;QACAC,OAAA,CAAAzB,KAAA,CAAAwB,GAAA;QACA,KAAAxB,KAAA;MACA;IACA;IAEA0B,aAAA;MACA;MACA,KAAAC,KAAA;QACA5B,MAAA,OAAAA,MAAA;QACA6B,MAAA;UACA3B,QAAA,OAAAA,QAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,QAAA,OAAAA;QACA;MACA;IACA;EAEA;EACA0B,cAAA;IACA;IACA,SAAA/B,OAAA,EAAAsB,GAAA,CAAAC,eAAA,MAAAvB,OAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}