{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchLandsat } from '@/api/landsat';\nimport { sampleNdwi } from '@/utils/ndwi-client';\nexport default {\n  name: 'MapView',\n  props: {\n    coords: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      map: null\n    };\n  },\n  async mounted() {\n    const {\n      latitude: lat,\n      longitude: lng\n    } = this.coords;\n\n    // 1Ô∏è‚É£ Cargar Google Maps y marcar ubicaci√≥n\n    try {\n      const google = await new Loader({\n        apiKey: process.env.VUE_APP_GOOGLE_KEY,\n        version: 'weekly'\n      }).load();\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: {\n          lat,\n          lng\n        },\n        zoom: 15,\n        disableDefaultUI: true\n      });\n      new google.maps.Marker({\n        position: {\n          lat,\n          lng\n        },\n        map: this.map\n      });\n    } catch (err) {\n      console.warn('Google Maps no se pudo cargar:', err);\n    }\n\n    // 2Ô∏è‚É£ Buscar la escena Landsat\n    let meanNdwi = null;\n    let status = 'Sin datos';\n    try {\n      const ls8 = await searchLandsat({\n        lat,\n        lng\n      });\n\n      // 3Ô∏è‚É£ Construir URLs de COG firmadas\n      const blobNir = ls8.assets.nir08.split('?')[0];\n      const blobSwir = ls8.assets.swir16.split('?')[0];\n      const tokenResp = await fetch(`https://planetarycomputer.microsoft.com/api/sas/v1/token/landsateuwest/landsat-c2`);\n      const {\n        token\n      } = await tokenResp.json();\n      const nirUrl = `${blobNir}?${token}`;\n      const swirUrl = `${blobSwir}?${token}`;\n      console.log('üîó nirUrl:', nirUrl);\n      console.log('üîó swirUrl:', swirUrl);\n\n      // 4Ô∏è‚É£ Calcular NDWI con GeoTIFF (p√≠xeles en ventana)\n      console.log('‚ñ∂Ô∏è Llamando a sampleNdwi‚Ä¶');\n      meanNdwi = await sampleNdwi(nirUrl, swirUrl, lat, lng);\n      console.log('‚Üê sampleNdwi result:', meanNdwi);\n\n      // 5Ô∏è‚É£ Clasificar seg√∫n umbrales\n      if (meanNdwi !== null) {\n        if (meanNdwi < 0.10) status = 'Seco';else if (meanNdwi < 0.25) status = 'Medio';else status = 'H√∫medo';\n      }\n    } catch (e) {\n      console.error('Error calculando NDWI:', e);\n    }\n\n    // 6Ô∏è‚É£ Emitir resultado al componente padre\n    console.log('‚ú® Emitiendo ndwi-status:', meanNdwi, status);\n    this.$emit('ndwi-status', {\n      ndwi: meanNdwi,\n      status\n    });\n  }\n};","map":{"version":3,"names":["Loader","searchLandsat","sampleNdwi","name","props","coords","type","Object","required","data","map","mounted","latitude","lat","longitude","lng","google","apiKey","process","env","VUE_APP_GOOGLE_KEY","version","load","maps","Map","document","getElementById","center","zoom","disableDefaultUI","Marker","position","err","console","warn","meanNdwi","status","ls8","blobNir","assets","nir08","split","blobSwir","swir16","tokenResp","fetch","token","json","nirUrl","swirUrl","log","e","error","$emit","ndwi"],"sources":["src/components/MapView.vue"],"sourcesContent":["<!-- src/components/MapView.vue -->\r\n<template>\r\n  <div id=\"map\" class=\"w-100 rounded shadow\" style=\"height:350px; position: relative;\">\r\n    <!-- El mapa se inicializa aqu√≠ -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Loader } from '@googlemaps/js-api-loader'\r\nimport { searchLandsat } from '@/api/landsat'\r\nimport { sampleNdwi } from '@/utils/ndwi-client'\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  props: { coords: { type: Object, required: true } },\r\n  data() { return { map: null } },\r\n  async mounted() {\r\n    const { latitude: lat, longitude: lng } = this.coords\r\n\r\n    // 1Ô∏è‚É£ Cargar Google Maps y marcar ubicaci√≥n\r\n    try {\r\n      const google = await new Loader({ apiKey: process.env.VUE_APP_GOOGLE_KEY, version: 'weekly' }).load()\r\n      this.map = new google.maps.Map(document.getElementById('map'), { center: { lat, lng }, zoom: 15, disableDefaultUI: true })\r\n      new google.maps.Marker({ position: { lat, lng }, map: this.map })\r\n    } catch (err) {\r\n      console.warn('Google Maps no se pudo cargar:', err)\r\n    }\r\n\r\n    // 2Ô∏è‚É£ Buscar la escena Landsat\r\n    let meanNdwi = null\r\n    let status = 'Sin datos'\r\n    try {\r\n      const ls8 = await searchLandsat({ lat, lng })\r\n\r\n      // 3Ô∏è‚É£ Construir URLs de COG firmadas\r\n      const blobNir  = ls8.assets.nir08.split('?')[0]\r\n      const blobSwir = ls8.assets.swir16.split('?')[0]\r\n      const tokenResp = await fetch(`https://planetarycomputer.microsoft.com/api/sas/v1/token/landsateuwest/landsat-c2`)\r\n      const { token } = await tokenResp.json()\r\n      const nirUrl  = `${blobNir}?${token}`\r\n      const swirUrl = `${blobSwir}?${token}`\r\n      console.log('üîó nirUrl:', nirUrl)\r\n      console.log('üîó swirUrl:', swirUrl)\r\n\r\n      // 4Ô∏è‚É£ Calcular NDWI con GeoTIFF (p√≠xeles en ventana)\r\n      console.log('‚ñ∂Ô∏è Llamando a sampleNdwi‚Ä¶')\r\n      meanNdwi = await sampleNdwi(nirUrl, swirUrl, lat, lng)\r\n      console.log('‚Üê sampleNdwi result:', meanNdwi)\r\n\r\n      // 5Ô∏è‚É£ Clasificar seg√∫n umbrales\r\n      if (meanNdwi !== null) {\r\n        if (meanNdwi < 0.10) status = 'Seco'\r\n        else if (meanNdwi < 0.25) status = 'Medio'\r\n        else status = 'H√∫medo'\r\n      }\r\n    } catch (e) {\r\n      console.error('Error calculando NDWI:', e)\r\n    }\r\n\r\n    // 6Ô∏è‚É£ Emitir resultado al componente padre\r\n    console.log('‚ú® Emitiendo ndwi-status:', meanNdwi, status)\r\n    this.$emit('ndwi-status', { ndwi: meanNdwi, status })\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#map { position: relative; }\r\n</style>\r\n"],"mappings":";;AAQA,SAAAA,MAAA;AACA,SAAAC,aAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IAAAC,MAAA;MAAAC,IAAA,EAAAC,MAAA;MAAAC,QAAA;IAAA;EAAA;EACAC,KAAA;IAAA;MAAAC,GAAA;IAAA;EAAA;EACA,MAAAC,QAAA;IACA;MAAAC,QAAA,EAAAC,GAAA;MAAAC,SAAA,EAAAC;IAAA,SAAAV,MAAA;;IAEA;IACA;MACA,MAAAW,MAAA,aAAAhB,MAAA;QAAAiB,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,kBAAA;QAAAC,OAAA;MAAA,GAAAC,IAAA;MACA,KAAAZ,GAAA,OAAAM,MAAA,CAAAO,IAAA,CAAAC,GAAA,CAAAC,QAAA,CAAAC,cAAA;QAAAC,MAAA;UAAAd,GAAA;UAAAE;QAAA;QAAAa,IAAA;QAAAC,gBAAA;MAAA;MACA,IAAAb,MAAA,CAAAO,IAAA,CAAAO,MAAA;QAAAC,QAAA;UAAAlB,GAAA;UAAAE;QAAA;QAAAL,GAAA,OAAAA;MAAA;IACA,SAAAsB,GAAA;MACAC,OAAA,CAAAC,IAAA,mCAAAF,GAAA;IACA;;IAEA;IACA,IAAAG,QAAA;IACA,IAAAC,MAAA;IACA;MACA,MAAAC,GAAA,SAAApC,aAAA;QAAAY,GAAA;QAAAE;MAAA;;MAEA;MACA,MAAAuB,OAAA,GAAAD,GAAA,CAAAE,MAAA,CAAAC,KAAA,CAAAC,KAAA;MACA,MAAAC,QAAA,GAAAL,GAAA,CAAAE,MAAA,CAAAI,MAAA,CAAAF,KAAA;MACA,MAAAG,SAAA,SAAAC,KAAA;MACA;QAAAC;MAAA,UAAAF,SAAA,CAAAG,IAAA;MACA,MAAAC,MAAA,MAAAV,OAAA,IAAAQ,KAAA;MACA,MAAAG,OAAA,MAAAP,QAAA,IAAAI,KAAA;MACAb,OAAA,CAAAiB,GAAA,eAAAF,MAAA;MACAf,OAAA,CAAAiB,GAAA,gBAAAD,OAAA;;MAEA;MACAhB,OAAA,CAAAiB,GAAA;MACAf,QAAA,SAAAjC,UAAA,CAAA8C,MAAA,EAAAC,OAAA,EAAApC,GAAA,EAAAE,GAAA;MACAkB,OAAA,CAAAiB,GAAA,yBAAAf,QAAA;;MAEA;MACA,IAAAA,QAAA;QACA,IAAAA,QAAA,SAAAC,MAAA,eACA,IAAAD,QAAA,SAAAC,MAAA,gBACAA,MAAA;MACA;IACA,SAAAe,CAAA;MACAlB,OAAA,CAAAmB,KAAA,2BAAAD,CAAA;IACA;;IAEA;IACAlB,OAAA,CAAAiB,GAAA,6BAAAf,QAAA,EAAAC,MAAA;IACA,KAAAiB,KAAA;MAAAC,IAAA,EAAAnB,QAAA;MAAAC;IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}