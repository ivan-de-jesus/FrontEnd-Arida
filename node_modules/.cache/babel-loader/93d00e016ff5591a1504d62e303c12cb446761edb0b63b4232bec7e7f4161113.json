{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fromUrl } from 'geotiff';\nimport proj4 from 'proj4';\n\n// Definimos las proyecciones para reprojectar coordenadas\nproj4.defs('EPSG:4326', '+proj=longlat +datum=WGS84 +no_defs');\nproj4.defs('EPSG:32614', '+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs');\n\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud (EPSG:4326)\r\n * @param {number} lng     Longitud (EPSG:4326)\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\n  // 1) Abre ambos COGs\n  const [tiffNIR, tiffSWIR] = await Promise.all([fromUrl(nirUrl), fromUrl(swirUrl)]);\n  const [imgNIR, imgSWIR] = await Promise.all([tiffNIR.getImage(), tiffSWIR.getImage()]);\n\n  // 2) Reproyectar lat/lng a coordenadas de mapa (UTM14N)\n  const [xMap, yMap] = proj4('EPSG:4326', 'EPSG:32614', [lng, lat]);\n\n  // 3) Obtener georreferenciación del COG\n  const [originX, originY] = imgNIR.getOrigin();\n  const [resX, resY] = imgNIR.getResolution();\n  const width = imgNIR.getWidth();\n  const height = imgNIR.getHeight();\n\n  // 4) Calcular columna/fila de píxel central\n  const col = Math.floor((xMap - originX) / resX);\n  const row = Math.floor((originY - yMap) / Math.abs(resY));\n\n  // 5) Definir ventana de muestreo de 3×3 píxeles\n  const half = 1;\n  const col0 = Math.max(0, col - half);\n  const row0 = Math.max(0, row - half);\n  const col1 = Math.min(width, col + half + 1);\n  const row1 = Math.min(height, row + half + 1);\n\n  // 6) Leer ventana de cada banda\n  const [nirVals] = await imgNIR.readRasters({\n    window: [col0, row0, col1, row1],\n    samples: [0]\n  });\n  const [swirVals] = await imgSWIR.readRasters({\n    window: [col0, row0, col1, row1],\n    samples: [0]\n  });\n\n  // 7) Calcular NDWI para cada píxel y filtrar nodata\n  const ndwiArr = [];\n  for (let i = 0; i < nirVals.length; i++) {\n    const nir = nirVals[i];\n    const swir = swirVals[i];\n    if (nir == null || swir == null || nir + swir === 0) continue;\n    ndwiArr.push((nir - swir) / (nir + swir));\n  }\n\n  // 8) Retornar null si no hay píxeles válidos\n  if (ndwiArr.length === 0) return null;\n\n  // 9) Promediar NDWI\n  const sum = ndwiArr.reduce((acc, v) => acc + v, 0);\n  return sum / ndwiArr.length;\n}","map":{"version":3,"names":["fromUrl","proj4","defs","sampleNdwi","nirUrl","swirUrl","lat","lng","tiffNIR","tiffSWIR","Promise","all","imgNIR","imgSWIR","getImage","xMap","yMap","originX","originY","getOrigin","resX","resY","getResolution","width","getWidth","height","getHeight","col","Math","floor","row","abs","half","col0","max","row0","col1","min","row1","nirVals","readRasters","window","samples","swirVals","ndwiArr","i","length","nir","swir","push","sum","reduce","acc","v"],"sources":["C:/Users/ivan.djgonzalez/Desktop/fotoMapa/photo-gps-viewer/src/utils/ndwi-client.js"],"sourcesContent":["\r\nimport { fromUrl } from 'geotiff'\r\nimport proj4 from 'proj4'\r\n\r\n// Definimos las proyecciones para reprojectar coordenadas\r\nproj4.defs('EPSG:4326', '+proj=longlat +datum=WGS84 +no_defs')\r\nproj4.defs('EPSG:32614', '+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs')\r\n\r\n/**\r\n * Muestra el valor de NDWI en la coordenada dada\r\n * usando las URLs de las bandas NIR (B5) y SWIR1 (B6).\r\n * @param {string} nirUrl  URL completa al COG de B5 (incluye SAS)\r\n * @param {string} swirUrl URL completa al COG de B6 (incluye SAS)\r\n * @param {number} lat     Latitud (EPSG:4326)\r\n * @param {number} lng     Longitud (EPSG:4326)\r\n * @returns {Promise<number>} NDWI = (nir - swir) / (nir + swir)\r\n */\r\nexport async function sampleNdwi(nirUrl, swirUrl, lat, lng) {\r\n  // 1) Abre ambos COGs\r\n  const [tiffNIR, tiffSWIR] = await Promise.all([\r\n    fromUrl(nirUrl),\r\n    fromUrl(swirUrl)\r\n  ])\r\n  const [imgNIR, imgSWIR] = await Promise.all([\r\n    tiffNIR.getImage(),\r\n    tiffSWIR.getImage()\r\n  ])\r\n\r\n  // 2) Reproyectar lat/lng a coordenadas de mapa (UTM14N)\r\n  const [xMap, yMap] = proj4('EPSG:4326', 'EPSG:32614', [lng, lat])\r\n\r\n  // 3) Obtener georreferenciación del COG\r\n  const [originX, originY] = imgNIR.getOrigin()\r\n  const [resX, resY]       = imgNIR.getResolution()\r\n  const width  = imgNIR.getWidth()\r\n  const height = imgNIR.getHeight()\r\n\r\n  // 4) Calcular columna/fila de píxel central\r\n  const col = Math.floor((xMap - originX) / resX)\r\n  const row = Math.floor((originY - yMap) / Math.abs(resY))\r\n\r\n  // 5) Definir ventana de muestreo de 3×3 píxeles\r\n  const half = 1\r\n  const col0 = Math.max(0, col - half)\r\n  const row0 = Math.max(0, row - half)\r\n  const col1 = Math.min(width, col + half + 1)\r\n  const row1 = Math.min(height, row + half + 1)\r\n\r\n  // 6) Leer ventana de cada banda\r\n  const [nirVals] = await imgNIR.readRasters({ window: [col0, row0, col1, row1], samples: [0] })\r\n  const [swirVals] = await imgSWIR.readRasters({ window: [col0, row0, col1, row1], samples: [0] })\r\n\r\n  // 7) Calcular NDWI para cada píxel y filtrar nodata\r\n  const ndwiArr = []\r\n  for (let i = 0; i < nirVals.length; i++) {\r\n    const nir = nirVals[i]\r\n    const swir = swirVals[i]\r\n    if (nir == null || swir == null || (nir + swir) === 0) continue\r\n    ndwiArr.push((nir - swir) / (nir + swir))\r\n  }\r\n\r\n  // 8) Retornar null si no hay píxeles válidos\r\n  if (ndwiArr.length === 0) return null\r\n\r\n  // 9) Promediar NDWI\r\n  const sum = ndwiArr.reduce((acc, v) => acc + v, 0)\r\n  return sum / ndwiArr.length\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}